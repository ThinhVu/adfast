!function(){var e="function"==typeof require?require(".."):window._;QUnit.module("Arrays"),QUnit.test("first",function(t){t.equal(e.first([1,2,3]),1,"can pull out the first element of an array"),t.equal(e([1,2,3]).first(),1,'can perform OO-style "first()"'),t.deepEqual(e.first([1,2,3],0),[],"returns an empty array when n <= 0 (0 case)"),t.deepEqual(e.first([1,2,3],-1),[],"returns an empty array when n <= 0 (negative case)"),t.deepEqual(e.first([1,2,3],2),[1,2],"can fetch the first n elements"),t.deepEqual(e.first([1,2,3],5),[1,2,3],"returns the whole array if n > length");var a=function(){return e.first(arguments)}(4,3,2,1);t.equal(a,4,"works on an arguments object"),a=e.map([[1,2,3],[1,2,3]],e.first),t.deepEqual(a,[1,1],"works well with _.map"),t.equal(e.first(null),void 0,"returns undefined when called on null"),Array.prototype[0]="boo",t.equal(e.first([]),void 0,"return undefined when called on a empty array"),delete Array.prototype[0]}),QUnit.test("head",function(t){t.strictEqual(e.head,e.first,"is an alias for first")}),QUnit.test("take",function(t){t.strictEqual(e.take,e.first,"is an alias for first")}),QUnit.test("rest",function(t){var a=[1,2,3,4];t.deepEqual(e.rest(a),[2,3,4],"fetches all but the first element"),t.deepEqual(e.rest(a,0),[1,2,3,4],"returns the whole array when index is 0"),t.deepEqual(e.rest(a,2),[3,4],"returns elements starting at the given index");var n=function(){return e(arguments).rest()}(1,2,3,4);t.deepEqual(n,[2,3,4],"works on an arguments object"),n=e.map([[1,2,3],[1,2,3]],e.rest),t.deepEqual(e.flatten(n),[2,3,2,3],"works well with _.map")}),QUnit.test("tail",function(t){t.strictEqual(e.tail,e.rest,"is an alias for rest")}),QUnit.test("drop",function(t){t.strictEqual(e.drop,e.rest,"is an alias for rest")}),QUnit.test("initial",function(t){t.deepEqual(e.initial([1,2,3,4,5]),[1,2,3,4],"returns all but the last element"),t.deepEqual(e.initial([1,2,3,4],2),[1,2],"returns all but the last n elements"),t.deepEqual(e.initial([1,2,3,4],6),[],"returns an empty array when n > length");var a=function(){return e(arguments).initial()}(1,2,3,4);t.deepEqual(a,[1,2,3],"works on an arguments object"),a=e.map([[1,2,3],[1,2,3]],e.initial),t.deepEqual(e.flatten(a),[1,2,1,2],"works well with _.map")}),QUnit.test("last",function(t){t.equal(e.last([1,2,3]),3,"can pull out the last element of an array"),t.equal(e([1,2,3]).last(),3,'can perform OO-style "last()"'),t.deepEqual(e.last([1,2,3],0),[],"returns an empty array when n <= 0 (0 case)"),t.deepEqual(e.last([1,2,3],-1),[],"returns an empty array when n <= 0 (negative case)"),t.deepEqual(e.last([1,2,3],2),[2,3],"can fetch the last n elements"),t.deepEqual(e.last([1,2,3],5),[1,2,3],"returns the whole array if n > length");var a=function(){return e(arguments).last()}(1,2,3,4);t.equal(a,4,"works on an arguments object"),a=e.map([[1,2,3],[1,2,3]],e.last),t.deepEqual(a,[3,3],"works well with _.map"),t.equal(e.last(null),void 0,"returns undefined when called on null");var n=[];n[-1]="boo",t.equal(e.last(n),void 0,"return undefined when called on a empty array")}),QUnit.test("compact",function(t){t.deepEqual(e.compact([1,!1,null,0,"",void 0,NaN,2]),[1,2],"removes all falsy values");var a=function(){return e.compact(arguments)}(0,1,!1,2,!1,3);t.deepEqual(a,[1,2,3],"works on an arguments object"),a=e.map([[1,!1,!1],[!1,!1,3]],e.compact),t.deepEqual(a,[[1],[3]],"works well with _.map")}),QUnit.test("flatten",function(t){t.deepEqual(e.flatten(null),[],"supports null"),t.deepEqual(e.flatten(void 0),[],"supports undefined"),t.deepEqual(e.flatten([[],[[]],[]]),[],"supports empty arrays"),t.deepEqual(e.flatten([[],[[]],[]],!0),[[]],"can shallowly flatten empty arrays");var a=[1,[2],[3,[[[4]]]]];t.deepEqual(e.flatten(a),[1,2,3,4],"can flatten nested arrays"),t.deepEqual(e.flatten(a,!0),[1,2,3,[[[4]]]],"can shallowly flatten nested arrays");var n=function(){return e.flatten(arguments)}(1,[2],[3,[[[4]]]]);t.deepEqual(n,[1,2,3,4],"works on an arguments object"),a=[[1],[2],[3],[[4]]],t.deepEqual(e.flatten(a,!0),[1,2,3,[4]],"can shallowly flatten arrays containing only other arrays"),t.equal(e.flatten([e.range(10),e.range(10),5,1,3],!0).length,23,"can flatten medium length arrays"),t.equal(e.flatten([e.range(10),e.range(10),5,1,3]).length,23,"can shallowly flatten medium length arrays"),t.equal(e.flatten([new Array(1e6),e.range(56e3),5,1,3]).length,1056003,"can handle massive arrays"),t.equal(e.flatten([new Array(1e6),e.range(56e3),5,1,3],!0).length,1056003,"can handle massive arrays in shallow mode");for(var r=e.range(1e5),s=0;s<1e3;s++)r=[r];t.deepEqual(e.flatten(r),e.range(1e5),"can handle very deep arrays"),t.deepEqual(e.flatten(r,!0),r[0],"can handle very deep arrays in shallow mode")}),QUnit.test("without",function(t){var a=[1,2,1,0,3,1,4];t.deepEqual(e.without(a,0,1),[2,3,4],"removes all instances of the given values");var n=function(){return e.without(arguments,0,1)}(1,2,1,0,3,1,4);t.deepEqual(n,[2,3,4],"works on an arguments object"),a=[{one:1},{two:2}],t.deepEqual(e.without(a,{one:1}),a,"compares objects by reference (value case)"),t.deepEqual(e.without(a,a[0]),[{two:2}],"compares objects by reference (reference case)")}),QUnit.test("sortedIndex",function(t){var a=[10,20,30,40,50],n=e.sortedIndex(a,35);t.equal(n,3,"finds the index at which a value should be inserted to retain order");var r=e.sortedIndex(a,30);t.equal(r,2,"finds the smallest index at which a value could be inserted to retain order");var s=[{x:10},{x:20},{x:30},{x:40}],u=function(e){return e.x};t.strictEqual(e.sortedIndex(s,{x:25},u),2,"uses the result of `iterator` for order comparisons"),t.strictEqual(e.sortedIndex(s,{x:35},"x"),3,"when `iterator` is a string, uses that key for order comparisons");var l={1:2,2:3,3:4};u=function(e){return this[e]},t.strictEqual(e.sortedIndex([1,3],2,u,l),1,"can execute its iterator in the given context");for(var i=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215,33554431,67108863,134217727,268435455,536870911,1073741823,2147483647],o=Array(Math.pow(2,32)-1),d=i.length;d--;)o[i[d]]=i[d];t.equal(e.sortedIndex(o,2147483648),2147483648,"works with large indexes")}),QUnit.test("uniq",function(t){var a=[1,2,1,3,1,4];t.deepEqual(e.uniq(a),[1,2,3,4],"can find the unique values of an unsorted array"),a=[1,1,1,2,2,3],t.deepEqual(e.uniq(a,!0),[1,2,3],"can find the unique values of a sorted array faster"),a=[{name:"Moe"},{name:"Curly"},{name:"Larry"},{name:"Curly"}];var n=[{name:"Moe"},{name:"Curly"},{name:"Larry"}],r=function(e){return e.name};t.deepEqual(e.uniq(a,!1,r),n,"uses the result of `iterator` for uniqueness comparisons (unsorted case)"),t.deepEqual(e.uniq(a,r),n,"`sorted` argument defaults to false when omitted"),t.deepEqual(e.uniq(a,"name"),n,"when `iterator` is a string, uses that key for comparisons (unsorted case)"),a=[{score:8},{score:10},{score:10}],n=[{score:8},{score:10}],r=function(e){return e.score},t.deepEqual(e.uniq(a,!0,r),n,"uses the result of `iterator` for uniqueness comparisons (sorted case)"),t.deepEqual(e.uniq(a,!0,"score"),n,"when `iterator` is a string, uses that key for comparisons (sorted case)"),t.deepEqual(e.uniq([{0:1},{0:1},{0:1},{0:2}],0),[{0:1},{0:2}],"can use falsey pluck like iterator");var s=function(){return e.uniq(arguments)}(1,2,1,3,1,4);t.deepEqual(s,[1,2,3,4],"works on an arguments object");var u={},l={},i={};t.deepEqual(e.uniq([u,l,u,l,i]),[u,l,i],"works on values that can be tested for equivalency but not ordered"),t.deepEqual(e.uniq(null),[],"returns an empty array when `array` is not iterable");var o={};a=[3],e.uniq(a,function(e,n,r){t.strictEqual(this,o,"executes its iterator in the given context"),t.strictEqual(e,3,"passes its iterator the value"),t.strictEqual(n,0,"passes its iterator the index"),t.strictEqual(r,a,"passes its iterator the entire array")},o)}),QUnit.test("unique",function(t){t.strictEqual(e.unique,e.uniq,"is an alias for uniq")}),QUnit.test("intersection",function(t){var a=["moe","curly","larry"],n=["moe","groucho"];t.deepEqual(e.intersection(a,n),["moe"],"can find the set intersection of two arrays"),t.deepEqual(e(a).intersection(n),["moe"],"can perform an OO-style intersection");var r=function(){return e.intersection(arguments,n)}("moe","curly","larry");t.deepEqual(r,["moe"],"works on an arguments object");var s=["moe","moe","curly","curly","larry","larry"];t.deepEqual(e.intersection(s,n),["moe"],"returns a duplicate-free array"),r=e.intersection([2,4,3,1],[1,2,3]),t.deepEqual(r,[2,3,1],"preserves the order of the first array"),r=e.intersection(null,[1,2,3]),t.deepEqual(r,[],"returns an empty array when passed null as the first argument"),r=e.intersection([1,2,3],null),t.deepEqual(r,[],"returns an empty array when passed null as an argument beyond the first")}),QUnit.test("union",function(t){var a=e.union([1,2,3],[2,30,1],[1,40]);t.deepEqual(a,[1,2,3,30,40],"can find the union of a list of arrays"),a=e([1,2,3]).union([2,30,1],[1,40]),t.deepEqual(a,[1,2,3,30,40],"can perform an OO-style union"),a=e.union([1,2,3],[2,30,1],[1,40,[1]]),t.deepEqual(a,[1,2,3,30,40,[1]],"can find the union of a list of nested arrays"),a=e.union([10,20],[1,30,10],[0,40]),t.deepEqual(a,[10,20,1,30,0,40],"orders values by their first encounter"),a=function(){return e.union(arguments,[2,30,1],[1,40])}(1,2,3),t.deepEqual(a,[1,2,3,30,40],"works on an arguments object"),t.deepEqual(e.union([1,2,3],4),[1,2,3],"restricts the union to arrays only")}),QUnit.test("difference",function(t){var a=e.difference([1,2,3],[2,30,40]);t.deepEqual(a,[1,3],"can find the difference of two arrays"),a=e([1,2,3]).difference([2,30,40]),t.deepEqual(a,[1,3],"can perform an OO-style difference"),a=e.difference([1,2,3,4],[2,30,40],[1,11,111]),t.deepEqual(a,[3,4],"can find the difference of three arrays"),a=e.difference([8,9,3,1],[3,8]),t.deepEqual(a,[9,1],"preserves the order of the first array"),a=function(){return e.difference(arguments,[2,30,40])}(1,2,3),t.deepEqual(a,[1,3],"works on an arguments object"),a=e.difference([1,2,3],1),t.deepEqual(a,[1,2,3],"restrict the difference to arrays only")}),QUnit.test("zip",function(t){var a=["moe","larry","curly"],n=[30,40,50],r=[!0];t.deepEqual(e.zip(a,n,r),[["moe",30,!0],["larry",40,void 0],["curly",50,void 0]],"zipped together arrays of different lengths");var s=e.zip(["moe",30,"stooge 1"],["larry",40,"stooge 2"],["curly",50,"stooge 3"]);t.deepEqual(s,[["moe","larry","curly"],[30,40,50],["stooge 1","stooge 2","stooge 3"]],"zipped pairs"),s=e.zip(["moe",30],["larry",40],["curly",50,"extra data"]),t.deepEqual(s,[["moe","larry","curly"],[30,40,50],[void 0,void 0,"extra data"]],"zipped pairs with empties");var u=e.zip([]);t.deepEqual(u,[],"unzipped empty"),t.deepEqual(e.zip(null),[],"handles null"),t.deepEqual(e.zip(),[],"_.zip() returns []")}),QUnit.test("unzip",function(t){t.deepEqual(e.unzip(null),[],"handles null"),t.deepEqual(e.unzip([["a","b"],[1,2]]),[["a",1],["b",2]]);var a=e.zip(["fred","barney"],[30,40],[!0,!1]);t.deepEqual(e.unzip(a),[["fred","barney"],[30,40],[!0,!1]]),a=e.zip(["moe",30],["larry",40],["curly",50,"extra data"]),t.deepEqual(e.unzip(a),[["moe",30,void 0],["larry",40,void 0],["curly",50,"extra data"]],"Uses length of largest array")}),QUnit.test("object",function(t){var a=e.object(["moe","larry","curly"],[30,40,50]),n={moe:30,larry:40,curly:50};t.deepEqual(a,n,"two arrays zipped together into an object"),a=e.object([["one",1],["two",2],["three",3]]),n={one:1,two:2,three:3},t.deepEqual(a,n,"an array of pairs zipped together into an object");var r={moe:30,larry:40,curly:50};t.deepEqual(e.object(e.pairs(r)),r,"an object converted to pairs and back to an object"),t.deepEqual(e.object(null),{},"handles nulls")}),QUnit.test("indexOf",function(t){var a=[1,2,3];t.equal(e.indexOf(a,2),1,"can compute indexOf");var n=function(){return e.indexOf(arguments,2)}(1,2,3);t.equal(n,1,"works on an arguments object"),e.each([null,void 0,[],!1],function(a){var n="Handles: "+(e.isArray(a)?"[]":a);t.equal(e.indexOf(a,2),-1,n),t.equal(e.indexOf(a,2,-1),-1,n),t.equal(e.indexOf(a,2,-20),-1,n),t.equal(e.indexOf(a,2,15),-1,n)});var r=35;a=[10,20,30,40,50];var s=e.indexOf(a,r,!0);t.equal(s,-1,"35 is not in the list"),a=[10,20,30,40,50],r=40,s=e.indexOf(a,r,!0),t.equal(s,3,"40 is in the list"),a=[1,40,40,40,40,40,40,40,50,60,70],r=40,t.equal(e.indexOf(a,r,!0),1,"40 is in the list"),t.equal(e.indexOf(a,6,!0),-1,"6 isnt in the list"),t.equal(e.indexOf([1,2,5,4,6,7],5,!0),-1,"sorted indexOf doesn't uses binary search"),t.ok(e.every(["1",[],{},null],function(){return 1===e.indexOf(a,r,{})}),"non-nums as fromIndex make indexOf assume sorted"),a=[1,2,3,1,2,3,1,2,3],s=e.indexOf(a,2,5),t.equal(s,7,"supports the fromIndex argument"),s=e.indexOf([,,,0],void 0),t.equal(s,0,"treats sparse arrays as if they were dense");var u=[1,2,3,1,2,3];t.strictEqual(e.indexOf(u,1,-3),3,"neg `fromIndex` starts at the right index"),t.strictEqual(e.indexOf(u,1,-2),-1,"neg `fromIndex` starts at the right index"),t.strictEqual(e.indexOf(u,2,-3),4),e.each([-6,-8,-(1/0)],function(a){t.strictEqual(e.indexOf(u,1,a),0)}),t.strictEqual(e.indexOf([1,2,3],1,!0),0),s=e.indexOf([],void 0,!0),t.equal(s,-1,"empty array with truthy `isSorted` returns -1")}),QUnit.test("indexOf with NaN",function(t){t.strictEqual(e.indexOf([1,2,NaN,NaN],NaN),2,"Expected [1, 2, NaN] to contain NaN"),t.strictEqual(e.indexOf([1,2,1/0],NaN),-1,"Expected [1, 2, NaN] to contain NaN"),t.strictEqual(e.indexOf([1,2,NaN,NaN],NaN,1),2,"startIndex does not affect result"),t.strictEqual(e.indexOf([1,2,NaN,NaN],NaN,-2),2,"startIndex does not affect result"),function(){t.strictEqual(e.indexOf(arguments,NaN),2,"Expected arguments [1, 2, NaN] to contain NaN")}(1,2,NaN,NaN)}),QUnit.test("indexOf with +- 0",function(t){e.each([-0,0],function(a){t.strictEqual(e.indexOf([1,2,a,a],a),2),t.strictEqual(e.indexOf([1,2,a,a],-a),2)})}),QUnit.test("lastIndexOf",function(t){var a=[1,0,1],n=[void 0,"",0,!1,NaN,null,void 0];t.equal(e.lastIndexOf(a,1),2),a=[1,0,1,0,0,1,0,0,0],a.lastIndexOf=null,t.equal(e.lastIndexOf(a,1),5,"can compute lastIndexOf, even without the native function"),t.equal(e.lastIndexOf(a,0),8,"lastIndexOf the other element");var r=function(){return e.lastIndexOf(arguments,1)}(1,0,1,0,0,1,0,0,0);t.equal(r,5,"works on an arguments object"),e.each([null,void 0,[],!1],function(a){var n="Handles: "+(e.isArray(a)?"[]":a);t.equal(e.lastIndexOf(a,2),-1,n),t.equal(e.lastIndexOf(a,2,-1),-1,n),t.equal(e.lastIndexOf(a,2,-20),-1,n),t.equal(e.lastIndexOf(a,2,15),-1,n)}),a=[1,2,3,1,2,3,1,2,3];var s=e.lastIndexOf(a,2,2);t.equal(s,1,"supports the fromIndex argument");var u=[1,2,3,1,2,3];t.strictEqual(e.lastIndexOf(u,1,0),0,"starts at the correct from idx"),t.strictEqual(e.lastIndexOf(u,3),5,"should return the index of the last matched value"),t.strictEqual(e.lastIndexOf(u,4),-1,"should return `-1` for an unmatched value"),t.strictEqual(e.lastIndexOf(u,1,2),0,"should work with a positive `fromIndex`"),e.each([6,8,Math.pow(2,32),1/0],function(a){t.strictEqual(e.lastIndexOf(u,void 0,a),-1),t.strictEqual(e.lastIndexOf(u,1,a),3),t.strictEqual(e.lastIndexOf(u,"",a),-1)});var l=e.map(n,function(e){return"number"==typeof e?-1:5}),i=e.map(n,function(t){return e.lastIndexOf(u,3,t)});t.deepEqual(i,l,"should treat falsey `fromIndex` values, except `0` and `NaN`, as `array.length`"),t.strictEqual(e.lastIndexOf(u,3,"1"),5,"should treat non-number `fromIndex` values as `array.length`"),t.strictEqual(e.lastIndexOf(u,3,!0),5,"should treat non-number `fromIndex` values as `array.length`"),t.strictEqual(e.lastIndexOf(u,2,-3),1,"should work with a negative `fromIndex`"),t.strictEqual(e.lastIndexOf(u,1,-3),3,"neg `fromIndex` starts at the right index"),t.deepEqual(e.map([-6,-8,-(1/0)],function(t){return e.lastIndexOf(u,1,t)}),[0,-1,-1])}),QUnit.test("lastIndexOf with NaN",function(t){t.strictEqual(e.lastIndexOf([1,2,NaN,NaN],NaN),3,"Expected [1, 2, NaN] to contain NaN"),t.strictEqual(e.lastIndexOf([1,2,1/0],NaN),-1,"Expected [1, 2, NaN] to contain NaN"),t.strictEqual(e.lastIndexOf([1,2,NaN,NaN],NaN,2),2,"fromIndex does not affect result"),t.strictEqual(e.lastIndexOf([1,2,NaN,NaN],NaN,-2),2,"fromIndex does not affect result"),function(){t.strictEqual(e.lastIndexOf(arguments,NaN),3,"Expected arguments [1, 2, NaN] to contain NaN")}(1,2,NaN,NaN)}),QUnit.test("lastIndexOf with +- 0",function(t){e.each([-0,0],function(a){t.strictEqual(e.lastIndexOf([1,2,a,a],a),3),t.strictEqual(e.lastIndexOf([1,2,a,a],-a),3),t.strictEqual(e.lastIndexOf([-1,1,2],-a),-1)})}),QUnit.test("findIndex",function(t){var a=[{a:0,b:0},{a:1,b:1},{a:2,b:2},{a:0,b:0}];t.equal(e.findIndex(a,function(e){return 0===e.a}),0),t.equal(e.findIndex(a,function(e){return e.b*e.a===4}),2),t.equal(e.findIndex(a,"a"),1,"Uses lookupIterator"),t.equal(e.findIndex(a,function(e){return e.b*e.a===5}),-1),t.equal(e.findIndex(null,e.noop),-1),t.strictEqual(e.findIndex(a,function(e){return null===e.foo}),-1),e.findIndex([{a:1}],function(e,n,r){t.equal(n,0),t.deepEqual(r,[{a:1}]),t.strictEqual(this,a,"called with context")},a);var n=[];n[20]={a:2,b:2},t.equal(e.findIndex(n,function(e){return e&&e.b*e.a===4}),20,"Works with sparse arrays");var r=[1,2,3,4];r.match=55,t.strictEqual(e.findIndex(r,function(e){return 55===e}),-1,"doesn't match array-likes keys")}),QUnit.test("findLastIndex",function(t){var a=[{a:0,b:0},{a:1,b:1},{a:2,b:2},{a:0,b:0}];t.equal(e.findLastIndex(a,function(e){return 0===e.a}),3),t.equal(e.findLastIndex(a,function(e){return e.b*e.a===4}),2),t.equal(e.findLastIndex(a,"a"),2,"Uses lookupIterator"),t.equal(e.findLastIndex(a,function(e){return e.b*e.a===5}),-1),t.equal(e.findLastIndex(null,e.noop),-1),t.strictEqual(e.findLastIndex(a,function(e){return null===e.foo}),-1),e.findLastIndex([{a:1}],function(e,n,r){t.equal(n,0),t.deepEqual(r,[{a:1}]),t.strictEqual(this,a,"called with context")},a);var n=[];n[20]={a:2,b:2},t.equal(e.findLastIndex(n,function(e){return e&&e.b*e.a===4}),20,"Works with sparse arrays");var r=[1,2,3,4];r.match=55,t.strictEqual(e.findLastIndex(r,function(e){return 55===e}),-1,"doesn't match array-likes keys")}),QUnit.test("range",function(t){t.deepEqual(e.range(0),[],"range with 0 as a first argument generates an empty array"),t.deepEqual(e.range(4),[0,1,2,3],"range with a single positive argument generates an array of elements 0,1,2,...,n-1"),t.deepEqual(e.range(5,8),[5,6,7],"range with two arguments a &amp; b, a&lt;b generates an array of elements a,a+1,a+2,...,b-2,b-1"),t.deepEqual(e.range(3,10,3),[3,6,9],"range with three arguments a &amp; b &amp; c, c &lt; b-a, a &lt; b generates an array of elements a,a+c,a+2c,...,b - (multiplier of a) &lt; c"),t.deepEqual(e.range(3,10,15),[3],"range with three arguments a &amp; b &amp; c, c &gt; b-a, a &lt; b generates an array with a single element, equal to a"),t.deepEqual(e.range(12,7,-2),[12,10,8],"range with three arguments a &amp; b &amp; c, a &gt; b, c &lt; 0 generates an array of elements a,a-c,a-2c and ends with the number not less than b"),t.deepEqual(e.range(0,-10,-1),[0,-1,-2,-3,-4,-5,-6,-7,-8,-9],"final example in the Python docs"),t.strictEqual(1/e.range(-0,1)[0],-(1/0),"should preserve -0"),t.deepEqual(e.range(8,5),[8,7,6],"negative range generates descending array"),t.deepEqual(e.range(-3),[0,-1,-2],"negative range generates descending array")}),QUnit.test("chunk",function(t){t.deepEqual(e.chunk([],2),[],"chunk for empty array returns an empty array"),t.deepEqual(e.chunk([1,2,3],0),[],"chunk into parts of 0 elements returns empty array"),t.deepEqual(e.chunk([1,2,3],-1),[],"chunk into parts of negative amount of elements returns an empty array"),t.deepEqual(e.chunk([1,2,3]),[],"defaults to empty array (chunk size 0)"),t.deepEqual(e.chunk([1,2,3],1),[[1],[2],[3]],"chunk into parts of 1 elements returns original array"),t.deepEqual(e.chunk([1,2,3],3),[[1,2,3]],"chunk into parts of current array length elements returns the original array"),t.deepEqual(e.chunk([1,2,3],5),[[1,2,3]],"chunk into parts of more then current array length elements returns the original array"),t.deepEqual(e.chunk([10,20,30,40,50,60,70],2),[[10,20],[30,40],[50,60],[70]],"chunk into parts of less then current array length elements"),t.deepEqual(e.chunk([10,20,30,40,50,60,70],3),[[10,20,30],[40,50,60],[70]],"chunk into parts of less then current array length elements")})}();