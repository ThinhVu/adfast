!function(){var e="function"==typeof require?require(".."):window._;QUnit.module("Chaining"),QUnit.test("map/flatten/reduce",function(t){var n=["I'm a lumberjack and I'm okay","I sleep all night and I work all day","He's a lumberjack and he's okay","He sleeps all night and he works all day"],a=e(n).chain().map(function(e){return e.split("")}).flatten().reduce(function(e,t){return e[t]=e[t]||0,e[t]++,e},{}).value();t.equal(a.a,16,"counted all the letters in the song"),t.equal(a.e,10,"counted all the letters in the song")}),QUnit.test("select/reject/sortBy",function(t){var n=[1,2,3,4,5,6,7,8,9,10];n=e(n).chain().select(function(e){return e%2===0}).reject(function(e){return e%4===0}).sortBy(function(e){return-e}).value(),t.deepEqual(n,[10,6,2],"filtered and reversed the numbers")}),QUnit.test("select/reject/sortBy in functional style",function(t){var n=[1,2,3,4,5,6,7,8,9,10];n=e.chain(n).select(function(e){return e%2===0}).reject(function(e){return e%4===0}).sortBy(function(e){return-e}).value(),t.deepEqual(n,[10,6,2],"filtered and reversed the numbers")}),QUnit.test("reverse/concat/unshift/pop/map",function(t){var n=[1,2,3,4,5];n=e(n).chain().reverse().concat([5,5,5]).unshift(17).pop().map(function(e){return 2*e}).value(),t.deepEqual(n,[34,10,8,6,4,2,10,10],"can chain together array functions.")}),QUnit.test("splice",function(t){var n=e([1,2,3,4,5]).chain();t.deepEqual(n.splice(1,3).value(),[1,5]),t.deepEqual(n.splice(1,0).value(),[1,5]),t.deepEqual(n.splice(1,1).value(),[1]),t.deepEqual(n.splice(0,1).value(),[],"#397 Can create empty array")}),QUnit.test("shift",function(t){var n=e([1,2,3]).chain();t.deepEqual(n.shift().value(),[2,3]),t.deepEqual(n.shift().value(),[3]),t.deepEqual(n.shift().value(),[],"#397 Can create empty array")}),QUnit.test("pop",function(t){var n=e([1,2,3]).chain();t.deepEqual(n.pop().value(),[1,2]),t.deepEqual(n.pop().value(),[1]),t.deepEqual(n.pop().value(),[],"#397 Can create empty array")}),QUnit.test("chaining works in small stages",function(t){var n=e([1,2,3,4]).chain();t.deepEqual(n.filter(function(e){return e<3}).value(),[1,2]),t.deepEqual(n.filter(function(e){return e>2}).value(),[3,4])}),QUnit.test("#1562: Engine proxies for chained functions",function(t){var n=e(512);t.strictEqual(n.toJSON(),512),t.strictEqual(n.valueOf(),512),t.strictEqual(+n,512),t.strictEqual(n.toString(),"512"),t.strictEqual(""+n,"512")})}();