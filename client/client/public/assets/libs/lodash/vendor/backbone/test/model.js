!function(e){var t,n,a=Backbone.Model.extend(),o=Backbone.Collection.extend({url:function(){return"/collection"}});e.module("Backbone.Model",{beforeEach:function(e){t=new a({id:"1-the-tempest",title:"The Tempest",author:"Bill Shakespeare",length:123}),n=new o,n.add(t)}}),e.test("initialize",function(e){e.expect(3);var t=Backbone.Model.extend({initialize:function(){this.one=1,e.equal(this.collection,n)}}),a=new t({},{collection:n});e.equal(a.one,1),e.equal(a.collection,n)}),e.test("Object.prototype properties are overridden by attributes",function(e){e.expect(1);var t=new Backbone.Model({hasOwnProperty:!0});e.equal(t.get("hasOwnProperty"),!0)}),e.test("initialize with attributes and options",function(e){e.expect(1);var t=Backbone.Model.extend({initialize:function(e,t){this.one=t.one}}),n=new t({},{one:1});e.equal(n.one,1)}),e.test("initialize with parsed attributes",function(e){e.expect(1);var t=Backbone.Model.extend({parse:function(e){return e.value+=1,e}}),n=new t({value:1},{parse:!0});e.equal(n.get("value"),2)}),e.test("preinitialize",function(e){e.expect(2);var t=Backbone.Model.extend({preinitialize:function(){this.one=1}}),a=new t({},{collection:n});e.equal(a.one,1),e.equal(a.collection,n)}),e.test("preinitialize occurs before the model is set up",function(e){e.expect(6);var t=Backbone.Model.extend({preinitialize:function(){e.equal(this.collection,void 0),e.equal(this.cid,void 0),e.equal(this.id,void 0)}}),a=new t({id:"foo"},{collection:n});e.equal(a.collection,n),e.equal(a.id,"foo"),e.notEqual(a.cid,void 0)}),e.test("parse can return null",function(e){e.expect(1);var t=Backbone.Model.extend({parse:function(e){return e.value+=1,null}}),n=new t({value:1},{parse:!0});e.equal(JSON.stringify(n.toJSON()),"{}")}),e.test("url",function(e){e.expect(3),t.urlRoot=null,e.equal(t.url(),"/collection/1-the-tempest"),t.collection.url="/collection/",e.equal(t.url(),"/collection/1-the-tempest"),t.collection=null,e.raises(function(){t.url()}),t.collection=n}),e.test("url when using urlRoot, and uri encoding",function(e){e.expect(2);var t=Backbone.Model.extend({urlRoot:"/collection"}),n=new t;e.equal(n.url(),"/collection"),n.set({id:"+1+"}),e.equal(n.url(),"/collection/%2B1%2B")}),e.test("url when using urlRoot as a function to determine urlRoot at runtime",function(e){e.expect(2);var t=Backbone.Model.extend({urlRoot:function(){return"/nested/"+this.get("parentId")+"/collection"}}),n=new t({parentId:1});e.equal(n.url(),"/nested/1/collection"),n.set({id:2}),e.equal(n.url(),"/nested/1/collection/2")}),e.test("underscore methods",function(e){e.expect(5);var t=new Backbone.Model({foo:"a",bar:"b",baz:"c"});t.clone();e.deepEqual(t.keys(),["foo","bar","baz"]),e.deepEqual(t.values(),["a","b","c"]),e.deepEqual(t.invert(),{a:"foo",b:"bar",c:"baz"}),e.deepEqual(t.pick("foo","baz"),{foo:"a",baz:"c"}),e.deepEqual(t.omit("foo","bar"),{baz:"c"})}),e.test("chain",function(e){var t=new Backbone.Model({a:0,b:1,c:2});e.deepEqual(t.chain().pick("a","b","c").values().compact().value(),[1,2])}),e.test("clone",function(e){e.expect(10);var t=new Backbone.Model({foo:1,bar:2,baz:3}),n=t.clone();e.equal(t.get("foo"),1),e.equal(t.get("bar"),2),e.equal(t.get("baz"),3),e.equal(n.get("foo"),t.get("foo"),"Foo should be the same on the clone."),e.equal(n.get("bar"),t.get("bar"),"Bar should be the same on the clone."),e.equal(n.get("baz"),t.get("baz"),"Baz should be the same on the clone."),t.set({foo:100}),e.equal(t.get("foo"),100),e.equal(n.get("foo"),1,"Changing a parent attribute does not change the clone.");var a=new Backbone.Model({p:1}),o=new Backbone.Model({p:2});o.set(a.clone().attributes,{unset:!0}),e.equal(a.get("p"),1),e.equal(o.get("p"),void 0)}),e.test("isNew",function(e){e.expect(6);var t=new Backbone.Model({foo:1,bar:2,baz:3});e.ok(t.isNew(),"it should be new"),t=new Backbone.Model({foo:1,bar:2,baz:3,id:-5}),e.ok(!t.isNew(),"any defined ID is legal, negative or positive"),t=new Backbone.Model({foo:1,bar:2,baz:3,id:0}),e.ok(!t.isNew(),"any defined ID is legal, including zero"),e.ok((new Backbone.Model).isNew(),"is true when there is no id"),e.ok(!new Backbone.Model({id:2}).isNew(),"is false for a positive integer"),e.ok(!new Backbone.Model({id:-5}).isNew(),"is false for a negative integer")}),e.test("get",function(e){e.expect(2),e.equal(t.get("title"),"The Tempest"),e.equal(t.get("author"),"Bill Shakespeare")}),e.test("escape",function(e){e.expect(5),e.equal(t.escape("title"),"The Tempest"),t.set({audience:"Bill & Bob"}),e.equal(t.escape("audience"),"Bill &amp; Bob"),t.set({audience:"Tim > Joan"}),e.equal(t.escape("audience"),"Tim &gt; Joan"),t.set({audience:10101}),e.equal(t.escape("audience"),"10101"),t.unset("audience"),e.equal(t.escape("audience"),"")}),e.test("has",function(e){e.expect(10);var t=new Backbone.Model;e.strictEqual(t.has("name"),!1),t.set({0:0,1:1,true:!0,false:!1,empty:"",name:"name",null:null,undefined:void 0}),e.strictEqual(t.has("0"),!0),e.strictEqual(t.has("1"),!0),e.strictEqual(t.has("true"),!0),e.strictEqual(t.has("false"),!0),e.strictEqual(t.has("empty"),!0),e.strictEqual(t.has("name"),!0),t.unset("name"),e.strictEqual(t.has("name"),!1),e.strictEqual(t.has("null"),!1),e.strictEqual(t.has("undefined"),!1)}),e.test("matches",function(e){e.expect(4);var t=new Backbone.Model;e.strictEqual(t.matches({name:"Jonas",cool:!0}),!1),t.set({name:"Jonas",cool:!0}),e.strictEqual(t.matches({name:"Jonas"}),!0),e.strictEqual(t.matches({name:"Jonas",cool:!0}),!0),e.strictEqual(t.matches({name:"Jonas",cool:!1}),!1)}),e.test("matches with predicate",function(e){var t=new Backbone.Model({a:0});e.strictEqual(t.matches(function(e){return e.a>1&&null!=e.b}),!1),t.set({a:3,b:!0}),e.strictEqual(t.matches(function(e){return e.a>1&&null!=e.b}),!0)}),e.test("set and unset",function(e){e.expect(8);var t=new Backbone.Model({id:"id",foo:1,bar:2,baz:3}),n=0;t.on("change:foo",function(){n+=1}),t.set({foo:2}),e.equal(t.get("foo"),2,"Foo should have changed."),e.equal(n,1,"Change count should have incremented."),t.set({foo:2}),e.equal(t.get("foo"),2,"Foo should NOT have changed, still 2"),e.equal(n,1,"Change count should NOT have incremented."),t.validate=function(t){e.equal(t.foo,void 0,"validate:true passed while unsetting")},t.unset("foo",{validate:!0}),e.equal(t.get("foo"),void 0,"Foo should have changed"),delete t.validate,e.equal(n,2,"Change count should have incremented for unset."),t.unset("id"),e.equal(t.id,void 0,"Unsetting the id should remove the id property.")}),e.test("#2030 - set with failed validate, followed by another set triggers change",function(e){var t=0,n=0,a=0,o=Backbone.Model.extend({validate:function(e){if(e.x>1)return a++,"this is an error"}}),s=new o({x:0});s.on("change:x",function(){t++}),s.on("change",function(){n++}),s.set({x:2},{validate:!0}),s.set({x:1},{validate:!0}),e.deepEqual([t,n,a],[1,1,1])}),e.test("set triggers changes in the correct order",function(e){var t=null,n=new Backbone.Model;n.on("last",function(){t="last"}),n.on("first",function(){t="first"}),n.trigger("first"),n.trigger("last"),e.equal(t,"last")}),e.test("set falsy values in the correct order",function(e){e.expect(2);var t=new Backbone.Model({result:"result"});t.on("change",function(){e.equal(t.changed.result,void 0),e.equal(t.previous("result"),!1)}),t.set({result:void 0},{silent:!0}),t.set({result:null},{silent:!0}),t.set({result:!1},{silent:!0}),t.set({result:void 0})}),e.test("nested set triggers with the correct options",function(e){var t=new Backbone.Model,n={},a={},o={};t.on("change",function(s,c){switch(t.get("a")){case 1:return e.equal(c,n),t.set("a",2,a);case 2:return e.equal(c,a),t.set("a",3,o);case 3:e.equal(c,o)}}),t.set("a",1,n)}),e.test("multiple unsets",function(e){e.expect(1);var t=0,n=function(){t++},a=new Backbone.Model({a:1});a.on("change:a",n),a.set({a:2}),a.unset("a"),a.unset("a"),e.equal(t,2,"Unset does not fire an event for missing attributes.")}),e.test("unset and changedAttributes",function(e){e.expect(1);var t=new Backbone.Model({a:1});t.on("change",function(){e.ok("a"in t.changedAttributes(),"changedAttributes should contain unset properties")}),t.unset("a")}),e.test("using a non-default id attribute.",function(e){e.expect(5);var t=Backbone.Model.extend({idAttribute:"_id"}),n=new t({id:"eye-dee",_id:25,title:"Model"});e.equal(n.get("id"),"eye-dee"),e.equal(n.id,25),e.equal(n.isNew(),!1),n.unset("_id"),e.equal(n.id,void 0),e.equal(n.isNew(),!0)}),e.test("setting an alternative cid prefix",function(e){e.expect(4);var t=Backbone.Model.extend({cidPrefix:"m"}),n=new t;e.equal(n.cid.charAt(0),"m"),n=new Backbone.Model,e.equal(n.cid.charAt(0),"c");var a=Backbone.Collection.extend({model:t}),o=new a([{id:"c5"},{id:"c6"},{id:"c7"}]);e.equal(o.get("c6").cid.charAt(0),"m"),o.set([{id:"c6",value:"test"}],{merge:!0,add:!0,remove:!1}),e.ok(o.get("c6").has("value"))}),e.test("set an empty string",function(e){e.expect(1);var t=new Backbone.Model({name:"Model"});t.set({name:""}),e.equal(t.get("name"),"")}),e.test("setting an object",function(e){e.expect(1);var t=new Backbone.Model({custom:{foo:1}});t.on("change",function(){e.ok(1)}),t.set({custom:{foo:1}}),t.set({custom:{foo:2}})}),e.test("clear",function(e){e.expect(3);var t,n=new Backbone.Model({id:1,name:"Model"});n.on("change:name",function(){t=!0}),n.on("change",function(){var t=n.changedAttributes();e.ok("name"in t)}),n.clear(),e.equal(t,!0),e.equal(n.get("name"),void 0)}),e.test("defaults",function(e){e.expect(9);var t=Backbone.Model.extend({defaults:{one:1,two:2}}),n=new t({two:void 0});e.equal(n.get("one"),1),e.equal(n.get("two"),2),n=new t({two:3}),e.equal(n.get("one"),1),e.equal(n.get("two"),3),t=Backbone.Model.extend({defaults:function(){return{one:3,two:4}}}),n=new t({two:void 0}),e.equal(n.get("one"),3),e.equal(n.get("two"),4),t=Backbone.Model.extend({defaults:{hasOwnProperty:!0}}),n=new t,e.equal(n.get("hasOwnProperty"),!0),n=new t({hasOwnProperty:void 0}),e.equal(n.get("hasOwnProperty"),!0),n=new t({hasOwnProperty:!1}),e.equal(n.get("hasOwnProperty"),!1)}),e.test("change, hasChanged, changedAttributes, previous, previousAttributes",function(e){e.expect(9);var t=new Backbone.Model({name:"Tim",age:10});e.deepEqual(t.changedAttributes(),!1),t.on("change",function(){e.ok(t.hasChanged("name"),"name changed"),e.ok(!t.hasChanged("age"),"age did not"),e.ok(_.isEqual(t.changedAttributes(),{name:"Rob"}),"changedAttributes returns the changed attrs"),e.equal(t.previous("name"),"Tim"),e.ok(_.isEqual(t.previousAttributes(),{name:"Tim",age:10}),"previousAttributes is correct")}),e.equal(t.hasChanged(),!1),e.equal(t.hasChanged(void 0),!1),t.set({name:"Rob"}),e.equal(t.get("name"),"Rob")}),e.test("changedAttributes",function(e){e.expect(3);var t=new Backbone.Model({a:"a",b:"b"});e.deepEqual(t.changedAttributes(),!1),e.equal(t.changedAttributes({a:"a"}),!1),e.equal(t.changedAttributes({a:"b"}).a,"b")}),e.test("change with options",function(e){e.expect(2);var t,n=new Backbone.Model({name:"Rob"});n.on("change",function(e,n){t=n.prefix+e.get("name")}),n.set({name:"Bob"},{prefix:"Mr. "}),e.equal(t,"Mr. Bob"),n.set({name:"Sue"},{prefix:"Ms. "}),e.equal(t,"Ms. Sue")}),e.test("change after initialize",function(e){e.expect(1);var t=0,n={id:1,label:"c"},a=new Backbone.Model(n);a.on("change",function(){t+=1}),a.set(n),e.equal(t,0)}),e.test("save within change event",function(e){e.expect(1);var t=this,n=new Backbone.Model({firstName:"Taylor",lastName:"Swift"});n.url="/test",n.on("change",function(){n.save(),e.ok(_.isEqual(t.syncArgs.model,n))}),n.set({lastName:"Hicks"})}),e.test("validate after save",function(e){e.expect(2);var t,n=new Backbone.Model;n.validate=function(e){if(e.admin)return"Can't change admin status."},n.sync=function(e,t,n){n.success.call(this,{admin:!0})},n.on("invalid",function(e,n){t=n}),n.save(null),e.equal(t,"Can't change admin status."),e.equal(n.validationError,"Can't change admin status.")}),e.test("save",function(e){e.expect(2),t.save({title:"Henry V"}),e.equal(this.syncArgs.method,"update"),e.ok(_.isEqual(this.syncArgs.model,t))}),e.test("save, fetch, destroy triggers error event when an error occurs",function(e){e.expect(3);var t=new Backbone.Model;t.on("error",function(){e.ok(!0)}),t.sync=function(e,t,n){n.error()},t.save({data:2,id:1}),t.fetch(),t.destroy()}),e.test("#3283 - save, fetch, destroy calls success with context",function(e){e.expect(3);var t=new Backbone.Model,n={},a={context:n,success:function(){e.equal(this,n)}};t.sync=function(e,t,n){n.success.call(n.context)},t.save({data:2,id:1},a),t.fetch(a),t.destroy(a)}),e.test("#3283 - save, fetch, destroy calls error with context",function(e){e.expect(3);var t=new Backbone.Model,n={},a={context:n,error:function(){e.equal(this,n)}};t.sync=function(e,t,n){n.error.call(n.context)},t.save({data:2,id:1},a),t.fetch(a),t.destroy(a)}),e.test("#3470 - save and fetch with parse false",function(e){e.expect(2);var t=0,n=new Backbone.Model;n.parse=function(){e.ok(!1)},n.sync=function(e,n,a){a.success({i:++t})},n.fetch({parse:!1}),e.equal(n.get("i"),t),n.save(null,{parse:!1}),e.equal(n.get("i"),t)}),e.test("save with PATCH",function(e){t.clear().set({id:1,a:1,b:2,c:3,d:4}),t.save(),e.equal(this.syncArgs.method,"update"),e.equal(this.syncArgs.options.attrs,void 0),t.save({b:2,d:4},{patch:!0}),e.equal(this.syncArgs.method,"patch"),e.equal(_.size(this.syncArgs.options.attrs),2),e.equal(this.syncArgs.options.attrs.d,4),e.equal(this.syncArgs.options.attrs.a,void 0),e.equal(this.ajaxSettings.data,'{"b":2,"d":4}')}),e.test("save with PATCH and different attrs",function(e){t.clear().save({b:2,d:4},{patch:!0,attrs:{B:1,D:3}}),e.equal(this.syncArgs.options.attrs.D,3),e.equal(this.syncArgs.options.attrs.d,void 0),e.equal(this.ajaxSettings.data,'{"B":1,"D":3}'),e.deepEqual(t.attributes,{b:2,d:4})}),e.test("save in positional style",function(e){e.expect(1);var t=new Backbone.Model;t.sync=function(e,t,n){n.success()},t.save("title","Twelfth Night"),e.equal(t.get("title"),"Twelfth Night")}),e.test("save with non-object success response",function(e){e.expect(2);var t=new Backbone.Model;t.sync=function(e,t,n){n.success("",n),n.success(null,n)},t.save({testing:"empty"},{success:function(t){e.deepEqual(t.attributes,{testing:"empty"})}})}),e.test("save with wait and supplied id",function(e){var t=Backbone.Model.extend({urlRoot:"/collection"}),n=new t;n.save({id:42},{wait:!0}),e.equal(this.ajaxSettings.url,"/collection/42")}),e.test("save will pass extra options to success callback",function(e){e.expect(1);var t=Backbone.Model.extend({sync:function(e,t,n){return _.extend(n,{specialSync:!0}),Backbone.Model.prototype.sync.call(this,e,t,n)},urlRoot:"/test"}),n=new t,a=function(t,n,a){e.ok(a.specialSync,"Options were passed correctly to callback")};n.save(null,{success:a}),this.ajaxSettings.success()}),e.test("fetch",function(e){e.expect(2),t.fetch(),e.equal(this.syncArgs.method,"read"),e.ok(_.isEqual(this.syncArgs.model,t))}),e.test("fetch will pass extra options to success callback",function(e){e.expect(1);var t=Backbone.Model.extend({sync:function(e,t,n){return _.extend(n,{specialSync:!0}),Backbone.Model.prototype.sync.call(this,e,t,n)},urlRoot:"/test"}),n=new t,a=function(t,n,a){e.ok(a.specialSync,"Options were passed correctly to callback")};n.fetch({success:a}),this.ajaxSettings.success()}),e.test("destroy",function(e){e.expect(3),t.destroy(),e.equal(this.syncArgs.method,"delete"),e.ok(_.isEqual(this.syncArgs.model,t));var n=new Backbone.Model;e.equal(n.destroy(),!1)}),e.test("destroy will pass extra options to success callback",function(e){e.expect(1);var t=Backbone.Model.extend({sync:function(e,t,n){return _.extend(n,{specialSync:!0}),Backbone.Model.prototype.sync.call(this,e,t,n)},urlRoot:"/test"}),n=new t({id:"id"}),a=function(t,n,a){e.ok(a.specialSync,"Options were passed correctly to callback")};n.destroy({success:a}),this.ajaxSettings.success()}),e.test("non-persisted destroy",function(e){e.expect(1);var t=new Backbone.Model({foo:1,bar:2,baz:3});t.sync=function(){throw"should not be called"},t.destroy(),e.ok(!0,"non-persisted model should not call sync")}),e.test("validate",function(e){var t,n=new Backbone.Model;n.validate=function(e){if(e.admin!==this.get("admin"))return"Can't change admin status."},n.on("invalid",function(e,n){t=n});var a=n.set({a:100});e.equal(a,n),e.equal(n.get("a"),100),e.equal(t,void 0),a=n.set({admin:!0}),e.equal(n.get("admin"),!0),a=n.set({a:200,admin:!1},{validate:!0}),e.equal(t,"Can't change admin status."),e.equal(a,!1),e.equal(n.get("a"),100)}),e.test("validate on unset and clear",function(e){e.expect(6);var t,n=new Backbone.Model({name:"One"});n.validate=function(e){if(!e.name)return t=!0,"No thanks."},n.set({name:"Two"}),e.equal(n.get("name"),"Two"),e.equal(t,void 0),n.unset("name",{validate:!0}),e.equal(t,!0),e.equal(n.get("name"),"Two"),n.clear({validate:!0}),e.equal(n.get("name"),"Two"),delete n.validate,n.clear(),e.equal(n.get("name"),void 0)}),e.test("validate with error callback",function(e){e.expect(8);var t,n=new Backbone.Model;n.validate=function(e){if(e.admin)return"Can't change admin status."},n.on("invalid",function(e,n){t=!0});var a=n.set({a:100},{validate:!0});e.equal(a,n),e.equal(n.get("a"),100),e.equal(n.validationError,null),e.equal(t,void 0),a=n.set({a:200,admin:!0},{validate:!0}),e.equal(a,!1),e.equal(n.get("a"),100),e.equal(n.validationError,"Can't change admin status."),e.equal(t,!0)}),e.test("defaults always extend attrs (#459)",function(e){e.expect(2);var t=Backbone.Model.extend({defaults:{one:1},initialize:function(t,n){e.equal(this.attributes.one,1)}});new t({}),new t}),e.test("Inherit class properties",function(e){e.expect(6);var t=Backbone.Model.extend({instancePropSame:function(){},instancePropDiff:function(){}},{classProp:function(){}}),n=t.extend({instancePropDiff:function(){}}),a=new t,o=new n;e.equal(n.classProp,t.classProp),e.notEqual(n.classProp,void 0),e.equal(o.instancePropSame,a.instancePropSame),e.notEqual(o.instancePropSame,void 0),e.notEqual(n.prototype.instancePropDiff,t.prototype.instancePropDiff),e.notEqual(n.prototype.instancePropDiff,void 0)}),e.test("Nested change events don't clobber previous attributes",function(e){e.expect(4),(new Backbone.Model).on("change:state",function(t,n){e.equal(t.previous("state"),void 0),e.equal(n,"hello"),t.set({other:"whatever"})}).on("change:state",function(t,n){e.equal(t.previous("state"),void 0),e.equal(n,"hello")}).set({state:"hello"})}),e.test("hasChanged/set should use same comparison",function(e){e.expect(2);var t=0,n=new Backbone.Model({a:null});n.on("change",function(){e.ok(this.hasChanged("a"))}).on("change:a",function(){t++}).set({a:void 0}),e.equal(t,1)}),e.test("#582, #425, change:attribute callbacks should fire after all changes have occurred",function(e){e.expect(9);var t=new Backbone.Model,n=function(){e.equal(t.get("a"),"a"),e.equal(t.get("b"),"b"),e.equal(t.get("c"),"c")};t.on("change:a",n),t.on("change:b",n),t.on("change:c",n),t.set({a:"a",b:"b",c:"c"})}),e.test("#871, set with attributes property",function(e){e.expect(1);var t=new Backbone.Model;t.set({attributes:!0}),e.ok(t.has("attributes"))}),e.test("set value regardless of equality/change",function(e){e.expect(1);var t=new Backbone.Model({x:[]}),n=[];t.set({x:n}),e.ok(t.get("x")===n)}),e.test("set same value does not trigger change",function(e){e.expect(0);var t=new Backbone.Model({x:1});t.on("change change:x",function(){e.ok(!1)}),t.set({x:1}),t.set({x:1})}),e.test("unset does not fire a change for undefined attributes",function(e){e.expect(0);var t=new Backbone.Model({x:void 0});t.on("change:x",function(){e.ok(!1)}),t.unset("x")}),e.test("set: undefined values",function(e){e.expect(1);var t=new Backbone.Model({x:void 0});e.ok("x"in t.attributes)}),e.test("hasChanged works outside of change events, and true within",function(e){e.expect(6);var t=new Backbone.Model({x:1});t.on("change:x",function(){e.ok(t.hasChanged("x")),e.equal(t.get("x"),1)}),t.set({x:2},{silent:!0}),e.ok(t.hasChanged()),e.equal(t.hasChanged("x"),!0),t.set({x:1}),e.ok(t.hasChanged()),e.equal(t.hasChanged("x"),!0)}),e.test("hasChanged gets cleared on the following set",function(e){e.expect(4);var t=new Backbone.Model;t.set({x:1}),e.ok(t.hasChanged()),t.set({x:1}),e.ok(!t.hasChanged()),t.set({x:2}),e.ok(t.hasChanged()),t.set({}),e.ok(!t.hasChanged())}),e.test("save with `wait` succeeds without `validate`",function(e){e.expect(1);var t=new Backbone.Model;t.url="/test",t.save({x:1},{wait:!0}),e.ok(this.syncArgs.model===t)}),e.test("save without `wait` doesn't set invalid attributes",function(e){var t=new Backbone.Model;t.validate=function(){return 1},t.save({a:1}),e.equal(t.get("a"),void 0)}),e.test("save doesn't validate twice",function(e){var t=new Backbone.Model,n=0;t.sync=function(){},t.validate=function(){++n},t.save({}),e.equal(n,1)}),e.test("`hasChanged` for falsey keys",function(e){e.expect(2);var t=new Backbone.Model;t.set({x:!0},{silent:!0}),e.ok(!t.hasChanged(0)),e.ok(!t.hasChanged(""))}),e.test("`previous` for falsey keys",function(e){e.expect(2);var t=new Backbone.Model({0:!0,"":!0});t.set({0:!1,"":!1},{silent:!0}),e.equal(t.previous(0),!0),e.equal(t.previous(""),!0)}),e.test("`save` with `wait` sends correct attributes",function(e){e.expect(5);var t=0,n=new Backbone.Model({x:1,y:2});n.url="/test",n.on("change:x",function(){t++}),n.save({x:3},{wait:!0}),e.deepEqual(JSON.parse(this.ajaxSettings.data),{x:3,y:2}),e.equal(n.get("x"),1),e.equal(t,0),this.syncArgs.options.success({}),e.equal(n.get("x"),3),e.equal(t,1)}),e.test("a failed `save` with `wait` doesn't leave attributes behind",function(e){e.expect(1);var t=new Backbone.Model;t.url="/test",t.save({x:1},{wait:!0}),e.equal(t.get("x"),void 0)}),e.test("#1030 - `save` with `wait` results in correct attributes if success is called during sync",function(e){e.expect(2);var t=new Backbone.Model({x:1,y:2});t.sync=function(e,t,n){n.success()},t.on("change:x",function(){e.ok(!0)}),t.save({x:3},{wait:!0}),e.equal(t.get("x"),3)}),e.test("save with wait validates attributes",function(e){var t=new Backbone.Model;t.url="/test",t.validate=function(){e.ok(!0)},t.save({x:1},{wait:!0})}),e.test("save turns on parse flag",function(e){var t=Backbone.Model.extend({sync:function(t,n,a){e.ok(a.parse)}});(new t).save()}),e.test("nested `set` during `'change:attr'`",function(e){e.expect(2);var t=[],n=new Backbone.Model;n.on("all",function(e){t.push(e)}),n.on("change",function(){n.set({z:!0},{silent:!0})}),n.on("change:x",function(){n.set({y:!0})}),n.set({x:!0}),e.deepEqual(t,["change:y","change:x","change"]),t=[],n.set({z:!0}),e.deepEqual(t,[])}),e.test("nested `change` only fires once",function(e){e.expect(1);var t=new Backbone.Model;t.on("change",function(){e.ok(!0),t.set({x:!0})}),t.set({x:!0})}),e.test("nested `set` during `'change'`",function(e){e.expect(6);var t=0,n=new Backbone.Model;n.on("change",function(){switch(t++){case 0:e.deepEqual(this.changedAttributes(),{x:!0}),e.equal(n.previous("x"),void 0),n.set({y:!0});break;case 1:e.deepEqual(this.changedAttributes(),{x:!0,y:!0}),e.equal(n.previous("x"),void 0),n.set({z:!0});break;case 2:e.deepEqual(this.changedAttributes(),{x:!0,y:!0,z:!0}),e.equal(n.previous("y"),void 0);break;default:e.ok(!1)}}),n.set({x:!0})}),e.test("nested `change` with silent",function(e){e.expect(3);var t=0,n=new Backbone.Model;n.on("change:y",function(){e.ok(!1)}),n.on("change",function(){switch(t++){case 0:e.deepEqual(this.changedAttributes(),{x:!0}),n.set({y:!0},{silent:!0}),n.set({z:!0});break;case 1:e.deepEqual(this.changedAttributes(),{x:!0,y:!0,z:!0});break;case 2:e.deepEqual(this.changedAttributes(),{z:!1});break;default:e.ok(!1)}}),n.set({x:!0}),n.set({z:!1})}),e.test("nested `change:attr` with silent",function(e){e.expect(0);var t=new Backbone.Model;t.on("change:y",function(){e.ok(!1)}),t.on("change",function(){t.set({y:!0},{silent:!0}),t.set({z:!0})}),t.set({x:!0})}),e.test("multiple nested changes with silent",function(e){e.expect(1);var t=new Backbone.Model;t.on("change:x",function(){t.set({y:1},{silent:!0}),t.set({y:2})}),t.on("change:y",function(t,n){e.equal(n,2)}),t.set({x:!0})}),e.test("multiple nested changes with silent",function(e){e.expect(1);var t=[],n=new Backbone.Model;n.on("change:b",function(e,n){t.push(n)}),n.on("change",function(){n.set({b:1})}),n.set({b:0}),e.deepEqual(t,[0,1])}),e.test("basic silent change semantics",function(e){e.expect(1);var t=new Backbone.Model;t.set({x:1}),t.on("change",function(){e.ok(!0)}),t.set({x:2},{silent:!0}),t.set({x:1})}),e.test("nested set multiple times",function(e){e.expect(1);var t=new Backbone.Model;t.on("change:b",function(){e.ok(!0)}),t.on("change:a",function(){t.set({b:!0}),t.set({b:!0})}),t.set({a:!0})}),e.test("#1122 - clear does not alter options.",function(e){e.expect(1);var t=new Backbone.Model,n={};t.clear(n),e.ok(!n.unset)}),e.test("#1122 - unset does not alter options.",function(e){e.expect(1);var t=new Backbone.Model,n={};t.unset("x",n),e.ok(!n.unset)}),e.test("#1355 - `options` is passed to success callbacks",function(e){e.expect(3);var t=new Backbone.Model,n={success:function(t,n,a){e.ok(a)}};t.sync=function(e,t,n){n.success()},t.save({id:1},n),t.fetch(n),t.destroy(n)}),e.test("#1412 - Trigger 'sync' event.",function(e){e.expect(3);var t=new Backbone.Model({id:1});t.sync=function(e,t,n){n.success()},t.on("sync",function(){e.ok(!0)}),t.fetch(),t.save(),t.destroy()}),e.test("#1365 - Destroy: New models execute success callback.",function(e){var t=e.async();e.expect(2),(new Backbone.Model).on("sync",function(){e.ok(!1)}).on("destroy",function(){e.ok(!0)}).destroy({success:function(){e.ok(!0),t()}})}),e.test("#1433 - Save: An invalid model cannot be persisted.",function(e){e.expect(1);var t=new Backbone.Model;t.validate=function(){return"invalid"},t.sync=function(){e.ok(!1)},e.strictEqual(t.save(),!1)}),e.test("#1377 - Save without attrs triggers 'error'.",function(e){e.expect(1);var t=Backbone.Model.extend({url:"/test/",sync:function(e,t,n){n.success()},validate:function(){return"invalid"}}),n=new t({id:1});n.on("invalid",function(){e.ok(!0)}),n.save()}),e.test("#1545 - `undefined` can be passed to a model constructor without coersion",function(e){var t=Backbone.Model.extend({defaults:{one:1},initialize:function(t,n){e.equal(t,void 0)}});new t,new t(void 0)}),e.test("#1478 - Model `save` does not trigger change on unchanged attributes",function(e){var t=e.async();e.expect(0);var n=Backbone.Model.extend({sync:function(e,n,a){setTimeout(function(){a.success(),t()},0)}});new n({x:!0}).on("change:x",function(){e.ok(!1)}).save(null,{wait:!0})}),e.test("#1664 - Changing from one value, silently to another, back to original triggers a change.",function(e){e.expect(1);var t=new Backbone.Model({x:1});t.on("change:x",function(){e.ok(!0)}),t.set({x:2},{silent:!0}),t.set({x:3},{silent:!0}),t.set({x:1})}),e.test("#1664 - multiple silent changes nested inside a change event",function(e){e.expect(2);var t=[],n=new Backbone.Model;n.on("change",function(){n.set({a:"c"},{silent:!0}),n.set({b:2},{silent:!0}),n.unset("c",{silent:!0})}),n.on("change:a change:b change:c",function(e,n){t.push(n)}),n.set({a:"a",b:1,c:"item"}),e.deepEqual(t,["a",1,"item"]),e.deepEqual(n.attributes,{a:"c",b:2})}),e.test("#1791 - `attributes` is available for `parse`",function(e){var t=Backbone.Model.extend({parse:function(){this.has("a")}});new t(null,{parse:!0});e.expect(0)}),e.test("silent changes in last `change` event back to original triggers change",function(e){e.expect(2);var t=[],n=new Backbone.Model;n.on("change:a change:b change:c",function(e,n){t.push(n)}),n.on("change",function(){n.set({a:"c"},{silent:!0})}),n.set({a:"a"}),e.deepEqual(t,["a"]),n.set({a:"a"}),e.deepEqual(t,["a","a"])}),e.test("#1943 change calculations should use _.isEqual",function(e){var t=new Backbone.Model({a:{key:"value"}});t.set("a",{key:"value"},{silent:!0}),e.equal(t.changedAttributes(),!1)}),e.test("#1964 - final `change` event is always fired, regardless of interim changes",function(e){e.expect(1);var t=new Backbone.Model;t.on("change:property",function(){t.set("property","bar")}),t.on("change",function(){e.ok(!0)}),t.set("property","foo")}),e.test("isValid",function(e){var t=new Backbone.Model({valid:!0});t.validate=function(e){if(!e.valid)return"invalid"},e.equal(t.isValid(),!0),e.equal(t.set({valid:!1},{validate:!0}),!1),e.equal(t.isValid(),!0),t.set({valid:!1}),e.equal(t.isValid(),!1),e.ok(!t.set("valid",!1,{validate:!0}))}),e.test("#1179 - isValid returns true in the absence of validate.",function(e){e.expect(1);var t=new Backbone.Model;t.validate=null,e.ok(t.isValid())}),e.test("#1961 - Creating a model with {validate:true} will call validate and use the error callback",function(e){var t=Backbone.Model.extend({validate:function(e){if(1===e.id)return"This shouldn't happen"}}),n=new t({id:1},{validate:!0});e.equal(n.validationError,"This shouldn't happen")}),e.test("toJSON receives attrs during save(..., {wait: true})",function(e){e.expect(1);var t=Backbone.Model.extend({url:"/test",toJSON:function(){return e.strictEqual(this.attributes.x,1),_.clone(this.attributes)}}),n=new t;n.save({x:1},{wait:!0})}),e.test("#2034 - nested set with silent only triggers one change",function(e){e.expect(1);var t=new Backbone.Model;t.on("change",function(){t.set({b:!0},{silent:!0}),e.ok(!0)}),t.set({a:!0})}),e.test("#3778 - id will only be updated if it is set",function(e){e.expect(2);var t=new Backbone.Model({id:1});t.id=2,t.set({foo:"bar"}),e.equal(t.id,2),t.set({id:3}),e.equal(t.id,3)})}(QUnit);