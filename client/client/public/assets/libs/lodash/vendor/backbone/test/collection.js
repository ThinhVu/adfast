!function(e){var t,n,o,a,l,i,d;e.module("Backbone.Collection",{beforeEach:function(e){t=new Backbone.Model({id:3,label:"a"}),n=new Backbone.Model({id:2,label:"b"}),o=new Backbone.Model({id:1,label:"c"}),a=new Backbone.Model({id:0,label:"d"}),l=null,i=new Backbone.Collection([t,n,o,a]),d=new Backbone.Collection}}),e.test("new and sort",function(e){e.expect(6);var t=0;i.on("sort",function(){t++}),e.deepEqual(i.pluck("label"),["a","b","c","d"]),i.comparator=function(e,t){return e.id>t.id?-1:1},i.sort(),e.equal(t,1),e.deepEqual(i.pluck("label"),["a","b","c","d"]),i.comparator=function(e){return e.id},i.sort(),e.equal(t,2),e.deepEqual(i.pluck("label"),["d","c","b","a"]),e.equal(i.length,4)}),e.test("String comparator.",function(e){e.expect(1);var t=new Backbone.Collection([{id:3},{id:1},{id:2}],{comparator:"id"});e.deepEqual(t.pluck("id"),[1,2,3])}),e.test("new and parse",function(e){e.expect(3);var t=Backbone.Collection.extend({parse:function(e){return _.filter(e,function(e){return e.a%2===0})}}),n=[{a:1},{a:2},{a:3},{a:4}],o=new t(n,{parse:!0});e.strictEqual(o.length,2),e.strictEqual(o.first().get("a"),2),e.strictEqual(o.last().get("a"),4)}),e.test("clone preserves model and comparator",function(e){e.expect(3);var t=Backbone.Model.extend(),n=function(e){return e.id},o=new Backbone.Collection([{id:1}],{model:t,comparator:n}).clone();o.add({id:2}),e.ok(o.at(0)instanceof t),e.ok(o.at(1)instanceof t),e.strictEqual(o.comparator,n)}),e.test("get",function(e){e.expect(6),e.equal(i.get(0),a),e.equal(i.get(a.clone()),a),e.equal(i.get(2),n),e.equal(i.get({id:1}),o),e.equal(i.get(o.clone()),o),e.equal(i.get(i.first().cid),i.first())}),e.test("get with non-default ids",function(e){e.expect(5);var t=Backbone.Model.extend({idAttribute:"_id"}),n=new t({_id:100}),o=new Backbone.Collection([n],{model:t});e.equal(o.get(100),n),e.equal(o.get(n.cid),n),e.equal(o.get(n),n),e.equal(o.get(101),void 0);var a=new Backbone.Collection;a.model=t,a.add(n.attributes),e.equal(a.get(n.clone()),a.first())}),e.test("has",function(e){e.expect(15),e.ok(i.has(t)),e.ok(i.has(n)),e.ok(i.has(o)),e.ok(i.has(a)),e.ok(i.has(t.id)),e.ok(i.has(n.id)),e.ok(i.has(o.id)),e.ok(i.has(a.id)),e.ok(i.has(t.cid)),e.ok(i.has(n.cid)),e.ok(i.has(o.cid)),e.ok(i.has(a.cid));var l=new Backbone.Model({id:4});e.notOk(i.has(l)),e.notOk(i.has(l.id)),e.notOk(i.has(l.cid))}),e.test("update index when id changes",function(e){e.expect(4);var t=new Backbone.Collection;t.add([{id:0,name:"one"},{id:1,name:"two"}]);var n=t.get(0);e.equal(n.get("name"),"one"),t.on("change:name",function(t){e.ok(this.get(t))}),n.set({name:"dalmatians",id:101}),e.equal(t.get(0),null),e.equal(t.get(101).get("name"),"dalmatians")}),e.test("at",function(e){e.expect(2),e.equal(i.at(2),o),e.equal(i.at(-2),o)}),e.test("pluck",function(e){e.expect(1),e.equal(i.pluck("label").join(" "),"a b c d")}),e.test("add",function(e){e.expect(14);var t,n,o;t=n=o=null,l=new Backbone.Model({id:10,label:"e"}),d.add(l),d.on("add",function(){o=!0}),i.on("add",function(e,o,a){t=e.get("label"),n=a}),i.add(l,{amazing:!0}),e.equal(t,"e"),e.equal(i.length,5),e.equal(i.last(),l),e.equal(d.length,1),e.equal(o,null),e.ok(n.amazing);var a=new Backbone.Model({id:20,label:"f"}),c=new Backbone.Model({id:21,label:"g"}),r=new Backbone.Model({id:22,label:"h"}),s=new Backbone.Collection([a,c,r]);e.equal(s.length,3),s.add(l,{at:1}),e.equal(s.length,4),e.equal(s.at(1),l),e.equal(s.last(),r);var u=new Backbone.Collection(new Array(2)),f=0;u.on("add",function(){f+=1}),u.add([void 0,a,c]),e.equal(u.length,5),e.equal(f,3),u.add(new Array(4)),e.equal(u.length,9),e.equal(f,7)}),e.test("add multiple models",function(e){e.expect(6);var t=new Backbone.Collection([{at:0},{at:1},{at:9}]);t.add([{at:2},{at:3},{at:4},{at:5},{at:6},{at:7},{at:8}],{at:2});for(var n=0;n<=5;n++)e.equal(t.at(n).get("at"),n)}),e.test("add; at should have preference over comparator",function(e){e.expect(1);var t=Backbone.Collection.extend({comparator:function(e,t){return e.id>t.id?-1:1}}),n=new t([{id:2},{id:3}]);n.add(new Backbone.Model({id:1}),{at:1}),e.equal(n.pluck("id").join(" "),"3 1 2")}),e.test("add; at should add to the end if the index is out of bounds",function(e){e.expect(1);var t=new Backbone.Collection([{id:2},{id:3}]);t.add(new Backbone.Model({id:1}),{at:5}),e.equal(t.pluck("id").join(" "),"2 3 1")}),e.test("can't add model to collection twice",function(e){var t=new Backbone.Collection([{id:1},{id:2},{id:1},{id:2},{id:3}]);e.equal(t.pluck("id").join(" "),"1 2 3")}),e.test("can't add different model with same id to collection twice",function(e){e.expect(1);var t=new Backbone.Collection;t.unshift({id:101}),t.add({id:101}),e.equal(t.length,1)}),e.test("merge in duplicate models with {merge: true}",function(e){e.expect(3);var t=new Backbone.Collection;t.add([{id:1,name:"Moe"},{id:2,name:"Curly"},{id:3,name:"Larry"}]),t.add({id:1,name:"Moses"}),e.equal(t.first().get("name"),"Moe"),t.add({id:1,name:"Moses"},{merge:!0}),e.equal(t.first().get("name"),"Moses"),t.add({id:1,name:"Tim"},{merge:!0,silent:!0}),e.equal(t.first().get("name"),"Tim")}),e.test("add model to multiple collections",function(e){e.expect(10);var t=0,n=new Backbone.Model({id:10,label:"m"});n.on("add",function(l,i){t++,e.equal(n,l),t>1?e.equal(i,a):e.equal(i,o)});var o=new Backbone.Collection([]);o.on("add",function(t,a){e.equal(n,t),e.equal(o,a)});var a=new Backbone.Collection([]);a.on("add",function(t,o){e.equal(n,t),e.equal(a,o)}),o.add(n),e.equal(n.collection,o),a.add(n),e.equal(n.collection,o)}),e.test("add model with parse",function(e){e.expect(1);var t=Backbone.Model.extend({parse:function(e){return e.value+=1,e}}),n=Backbone.Collection.extend({model:t}),o=new n;o.add({value:1},{parse:!0}),e.equal(o.at(0).get("value"),2)}),e.test("add with parse and merge",function(e){var t=new Backbone.Collection;t.parse=function(e){return _.map(e,function(e){return e.model?e.model:e})},t.add({id:1}),t.add({model:{id:1,name:"Alf"}},{parse:!0,merge:!0}),e.equal(t.first().get("name"),"Alf")}),e.test("add model to collection with sort()-style comparator",function(e){e.expect(3);var t=new Backbone.Collection;t.comparator=function(e,t){return e.get("name")<t.get("name")?-1:1};var n=new Backbone.Model({name:"Tom"}),o=new Backbone.Model({name:"Rob"}),a=new Backbone.Model({name:"Tim"});t.add(n),t.add(o),t.add(a),e.equal(t.indexOf(o),0),e.equal(t.indexOf(a),1),e.equal(t.indexOf(n),2)}),e.test("comparator that depends on `this`",function(e){e.expect(2);var t=new Backbone.Collection;t.negative=function(e){return-e},t.comparator=function(e){return this.negative(e.id)},t.add([{id:1},{id:2},{id:3}]),e.deepEqual(t.pluck("id"),[3,2,1]),t.comparator=function(e,t){return this.negative(t.id)-this.negative(e.id)},t.sort(),e.deepEqual(t.pluck("id"),[1,2,3])}),e.test("remove",function(e){e.expect(12);var l=null,d=null;i.on("remove",function(t,n,o){l=t.get("label"),e.equal(o.index,3),e.equal(n.get(t),void 0,"#3693: model cannot be fetched from collection")}),d=i.remove(a),e.equal(l,"d"),e.strictEqual(d,a),d=i.remove(a),e.strictEqual(d,void 0),e.equal(i.length,3),e.equal(i.first(),t),i.off(),d=i.remove([o,a]),e.equal(d.length,1,"only returns removed models"),e.equal(d[0],o,"only returns removed models"),d=i.remove([o,n]),e.equal(d.length,1,"only returns removed models"),e.equal(d[0],n,"only returns removed models"),d=i.remove([]),e.deepEqual(d,[],"returns empty array when nothing removed")}),e.test("add and remove return values",function(e){e.expect(13);var t=Backbone.Model.extend({validate:function(e){if(e.id%2!==0)return"odd"}}),n=new Backbone.Collection;n.model=t;var o=n.add([{id:2},{id:4}],{validate:!0});e.equal(o.length,2),e.ok(o[0]instanceof Backbone.Model),e.equal(o[1],n.last()),e.equal(o[1].get("id"),4),o=n.add([{id:3},{id:6}],{validate:!0}),e.equal(n.length,3),e.equal(o[0],!1),e.equal(o[1].get("id"),6);var a=n.add({id:6});e.equal(a.cid,o[1].cid),a=n.remove({id:6}),e.equal(n.length,2),e.equal(a.id,6),o=n.remove([{id:2},{id:8}]),e.equal(n.length,1),e.equal(o[0].get("id"),2),e.equal(o[1],null)}),e.test("shift and pop",function(e){e.expect(2);var t=new Backbone.Collection([{a:"a"},{b:"b"},{c:"c"}]);e.equal(t.shift().get("a"),"a"),e.equal(t.pop().get("c"),"c")}),e.test("slice",function(e){e.expect(2);var t=new Backbone.Collection([{a:"a"},{b:"b"},{c:"c"}]),n=t.slice(1,3);e.equal(n.length,2),e.equal(n[0].get("b"),"b")}),e.test("events are unbound on remove",function(e){e.expect(3);var t=0,n=new Backbone.Model,o=new Backbone.Collection([n]);o.on("change",function(){t++}),n.set({name:"Kool"}),e.equal(t,1),o.reset([]),e.equal(n.collection,void 0),n.set({name:"Shadow"}),e.equal(t,1)}),e.test("remove in multiple collections",function(e){e.expect(7);var t={id:5,title:"Othello"},n=!1,o=new Backbone.Model(t),a=new Backbone.Model(t);a.on("remove",function(){n=!0});var l=new Backbone.Collection([o]),i=new Backbone.Collection([a]);e.notEqual(o,a),e.ok(1===l.length),e.ok(1===i.length),l.remove(o),e.equal(n,!1),e.ok(0===l.length),i.remove(o),e.ok(0===i.length),e.equal(n,!0)}),e.test("remove same model in multiple collection",function(e){e.expect(16);var t=0,n=new Backbone.Model({id:5,title:"Othello"});n.on("remove",function(l,i){t++,e.equal(n,l),t>1?e.equal(i,o):e.equal(i,a)});var o=new Backbone.Collection([n]);o.on("remove",function(t,a){e.equal(n,t),e.equal(o,a)});var a=new Backbone.Collection([n]);a.on("remove",function(t,o){e.equal(n,t),e.equal(a,o)}),e.equal(o,n.collection),a.remove(n),e.ok(0===a.length),e.ok(1===o.length),e.equal(t,1),e.equal(o,n.collection),o.remove(n),e.equal(null,n.collection),e.ok(0===o.length),e.equal(t,2)}),e.test("model destroy removes from all collections",function(e){e.expect(3);var t=new Backbone.Model({id:5,title:"Othello"});t.sync=function(e,t,n){n.success()};var n=new Backbone.Collection([t]),o=new Backbone.Collection([t]);t.destroy(),e.ok(0===n.length),e.ok(0===o.length),e.equal(void 0,t.collection)}),e.test("Collection: non-persisted model destroy removes from all collections",function(e){e.expect(3);var t=new Backbone.Model({title:"Othello"});t.sync=function(e,t,n){throw"should not be called"};var n=new Backbone.Collection([t]),o=new Backbone.Collection([t]);t.destroy(),e.ok(0===n.length),e.ok(0===o.length),e.equal(void 0,t.collection)}),e.test("fetch",function(e){e.expect(4);var t=new Backbone.Collection;t.url="/test",t.fetch(),e.equal(this.syncArgs.method,"read"),e.equal(this.syncArgs.model,t),e.equal(this.syncArgs.options.parse,!0),t.fetch({parse:!1}),e.equal(this.syncArgs.options.parse,!1)}),e.test("fetch with an error response triggers an error event",function(e){e.expect(1);var t=new Backbone.Collection;t.on("error",function(){e.ok(!0)}),t.sync=function(e,t,n){n.error()},t.fetch()}),e.test("#3283 - fetch with an error response calls error with context",function(e){e.expect(1);var t=new Backbone.Collection,n={},o={context:n,error:function(){e.equal(this,n)}};t.sync=function(e,t,n){n.error.call(n.context)},t.fetch(o)}),e.test("ensure fetch only parses once",function(e){e.expect(1);var t=new Backbone.Collection,n=0;t.parse=function(e){return n++,e},t.url="/test",t.fetch(),this.syncArgs.options.success([]),e.equal(n,1)}),e.test("create",function(e){e.expect(4);var t=new Backbone.Collection;t.url="/test";var n=t.create({label:"f"},{wait:!0});e.equal(this.syncArgs.method,"create"),e.equal(this.syncArgs.model,n),e.equal(n.get("label"),"f"),e.equal(n.collection,t)}),e.test("create with validate:true enforces validation",function(e){e.expect(3);var t=Backbone.Model.extend({validate:function(e){return"fail"}}),n=Backbone.Collection.extend({model:t}),o=new n;o.on("invalid",function(t,n,o){e.equal(n,"fail"),e.equal(o.validationError,"fail")}),e.equal(o.create({foo:"bar"},{validate:!0}),!1)}),e.test("create will pass extra options to success callback",function(e){e.expect(1);var t=Backbone.Model.extend({sync:function(e,t,n){return _.extend(n,{specialSync:!0}),Backbone.Model.prototype.sync.call(this,e,t,n)}}),n=Backbone.Collection.extend({model:t,url:"/test"}),o=new n,a=function(t,n,o){e.ok(o.specialSync,"Options were passed correctly to callback")};o.create({},{success:a}),this.ajaxSettings.success()}),e.test("create with wait:true should not call collection.parse",function(e){e.expect(0);var t=Backbone.Collection.extend({url:"/test",parse:function(){e.ok(!1)}}),n=new t;n.create({},{wait:!0}),this.ajaxSettings.success()}),e.test("a failing create returns model with errors",function(e){var t=Backbone.Model.extend({validate:function(e){return"fail"}}),n=Backbone.Collection.extend({model:t}),o=new n,a=o.create({foo:"bar"});e.equal(a.validationError,"fail"),e.equal(o.length,1)}),e.test("initialize",function(e){e.expect(1);var t=Backbone.Collection.extend({initialize:function(){this.one=1}}),n=new t;e.equal(n.one,1)}),e.test("preinitialize",function(e){e.expect(1);var t=Backbone.Collection.extend({preinitialize:function(){this.one=1}}),n=new t;e.equal(n.one,1)}),e.test("preinitialize occurs before the collection is set up",function(e){e.expect(2);var t=Backbone.Collection.extend({preinitialize:function(){e.notEqual(this.model,n)}}),n=Backbone.Model.extend({id:"foo"}),o=new t({},{model:n});e.equal(o.model,n)}),e.test("toJSON",function(e){e.expect(1),e.equal(JSON.stringify(i),'[{"id":3,"label":"a"},{"id":2,"label":"b"},{"id":1,"label":"c"},{"id":0,"label":"d"}]')}),e.test("where and findWhere",function(e){e.expect(8);var t=new Backbone.Model({a:1}),n=new Backbone.Collection([t,{a:1},{a:1,b:2},{a:2,b:2},{a:3}]);e.equal(n.where({a:1}).length,3),e.equal(n.where({a:2}).length,1),e.equal(n.where({a:3}).length,1),e.equal(n.where({b:1}).length,0),e.equal(n.where({b:2}).length,2),e.equal(n.where({a:1,b:2}).length,1),e.equal(n.findWhere({a:1}),t),e.equal(n.findWhere({a:4}),void 0)}),e.test("Underscore methods",function(e){e.expect(21),e.equal(i.map(function(e){return e.get("label")}).join(" "),"a b c d"),e.equal(i.some(function(e){return 100===e.id}),!1),e.equal(i.some(function(e){return 0===e.id}),!0),e.equal(i.reduce(function(e,t){return e.id>t.id?e:t}).id,3),e.equal(i.reduceRight(function(e,t){return e.id>t.id?e:t}).id,3),e.equal(i.indexOf(n),1),e.equal(i.size(),4),e.equal(i.rest().length,3),e.ok(!_.includes(i.rest(),t)),e.ok(_.includes(i.rest(),a)),e.ok(!i.isEmpty()),e.ok(!_.includes(i.without(a),a));var l=i.chain();e.equal(l.map("id").max().value(),3),e.equal(l.map("id").min().value(),0),e.deepEqual(l.filter(function(e){return e.id%2===0}).map(function(e){return 2*e.id}).value(),[4,0]),e.deepEqual(i.difference([o,a]),[t,n]),e.ok(i.includes(i.sample()));var d=i.first();e.deepEqual(i.groupBy(function(e){return e.id})[d.id],[d]),e.deepEqual(i.countBy(function(e){return e.id}),{0:1,1:1,2:1,3:1}),e.deepEqual(i.sortBy(function(e){return e.id})[0],i.at(3)),e.ok(i.indexBy("id")[d.id]===d)}),e.test("Underscore methods with object-style and property-style iteratee",function(e){e.expect(26);var t=new Backbone.Model({a:4,b:1,e:3}),n=new Backbone.Collection([{a:1,b:1},{a:2,b:1,c:1},{a:3,b:1},t]);e.equal(n.find({a:0}),void 0),e.deepEqual(n.find({a:4}),t),e.equal(n.find("d"),void 0),e.deepEqual(n.find("e"),t),e.equal(n.filter({a:0}),!1),e.deepEqual(n.filter({a:4}),[t]),e.equal(n.some({a:0}),!1),e.equal(n.some({a:1}),!0),e.equal(n.reject({a:0}).length,4),e.deepEqual(n.reject({a:4}),_.without(n.models,t)),e.equal(n.every({a:0}),!1),e.equal(n.every({b:1}),!0),e.deepEqual(n.partition({a:0})[0],[]),e.deepEqual(n.partition({a:0})[1],n.models),e.deepEqual(n.partition({a:4})[0],[t]),e.deepEqual(n.partition({a:4})[1],_.without(n.models,t)),e.deepEqual(n.map({a:2}),[!1,!0,!1,!1]),e.deepEqual(n.map("a"),[1,2,3,4]),e.deepEqual(n.sortBy("a")[3],t),e.deepEqual(n.sortBy("e")[0],t),e.deepEqual(n.countBy({a:4}),{false:3,true:1}),e.deepEqual(n.countBy("d"),{undefined:4}),e.equal(n.findIndex({b:1}),0),e.equal(n.findIndex({b:9}),-1),e.equal(n.findLastIndex({b:1}),3),e.equal(n.findLastIndex({b:9}),-1)}),e.test("reset",function(e){e.expect(16);var t=0,n=i.models;i.on("reset",function(){t+=1}),i.reset([]),e.equal(t,1),e.equal(i.length,0),e.equal(i.last(),null),i.reset(n),e.equal(t,2),e.equal(i.length,4),e.equal(i.last(),a),i.reset(_.map(n,function(e){return e.attributes})),e.equal(t,3),e.equal(i.length,4),e.ok(i.last()!==a),e.ok(_.isEqual(i.last().attributes,a.attributes)),i.reset(),e.equal(i.length,0),e.equal(t,4);var o=new Backbone.Model({id:20,label:"f"});i.reset([void 0,o]),e.equal(i.length,2),e.equal(t,5),i.reset(new Array(4)),e.equal(i.length,4),e.equal(t,6)}),e.test("reset with different values",function(e){var t=new Backbone.Collection({id:1});t.reset({id:1,a:1}),e.equal(t.get(1).get("a"),1)}),e.test("same references in reset",function(e){var t=new Backbone.Model({id:1}),n=new Backbone.Collection({id:1});n.reset(t),e.equal(n.get(1),t)}),e.test("reset passes caller options",function(e){e.expect(3);var t=Backbone.Model.extend({initialize:function(e,t){this.modelParameter=t.modelParameter}}),n=new(Backbone.Collection.extend({model:t}));n.reset([{astring:"green",anumber:1},{astring:"blue",anumber:2}],{modelParameter:"model parameter"}),e.equal(n.length,2),n.each(function(t){e.equal(t.modelParameter,"model parameter")})}),e.test("reset does not alter options by reference",function(e){e.expect(2);var t=new Backbone.Collection([{id:1}]),n={};t.on("reset",function(t,o){e.equal(n.previousModels,void 0),e.equal(o.previousModels[0].id,1)}),t.reset([],n)}),e.test("trigger custom events on models",function(e){e.expect(1);var n=null;t.on("custom",function(){n=!0}),t.trigger("custom"),e.equal(n,!0)}),e.test("add does not alter arguments",function(e){e.expect(2);var t={},n=[t];(new Backbone.Collection).add(n),e.equal(n.length,1),e.ok(t===n[0])}),e.test("#714: access `model.collection` in a brand new model.",function(e){e.expect(2);var t=new Backbone.Collection;t.url="/test";var n=Backbone.Model.extend({set:function(n){return e.equal(n.prop,"value"),e.equal(this.collection,t),this}});t.model=n,t.create({prop:"value"})}),e.test("#574, remove its own reference to the .models array.",function(e){e.expect(2);var t=new Backbone.Collection([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6}]);e.equal(t.length,6),t.remove(t.models),e.equal(t.length,0)}),e.test("#861, adding models to a collection which do not pass validation, with validate:true",function(e){e.expect(2);var t=Backbone.Model.extend({validate:function(e){if(3===e.id)return"id can't be 3"}}),n=Backbone.Collection.extend({model:t}),o=new n;o.on("invalid",function(){e.ok(!0)}),o.add([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6}],{validate:!0}),e.deepEqual(o.pluck("id"),[1,2,4,5,6])}),e.test("Invalid models are discarded with validate:true.",function(e){e.expect(5);var t=new Backbone.Collection;t.on("test",function(){e.ok(!0)}),t.model=Backbone.Model.extend({validate:function(e){if(!e.valid)return"invalid"}});var n=new t.model({id:1,valid:!0});t.add([n,{id:2}],{validate:!0}),n.trigger("test"),e.ok(t.get(n.cid)),e.ok(t.get(1)),e.ok(!t.get(2)),e.equal(t.length,1)}),e.test("multiple copies of the same model",function(e){e.expect(3);var t=new Backbone.Collection,n=new Backbone.Model;t.add([n,n]),e.equal(t.length,1),t.add([{id:1},{id:1}]),e.equal(t.length,2),e.equal(t.last().id,1)}),e.test("#964 - collection.get return inconsistent",function(e){e.expect(2);var t=new Backbone.Collection;e.ok(void 0===t.get(null)),e.ok(void 0===t.get())}),e.test("#1112 - passing options.model sets collection.model",function(e){e.expect(2);var t=Backbone.Model.extend({}),n=new Backbone.Collection([{id:1}],{model:t});e.ok(n.model===t),e.ok(n.at(0)instanceof t)}),e.test("null and undefined are invalid ids.",function(e){e.expect(2);var t=new Backbone.Model({id:1}),n=new Backbone.Collection([t]);t.set({id:null}),e.ok(!n.get("null")),t.set({id:1}),t.set({id:void 0}),e.ok(!n.get("undefined"))}),e.test("falsy comparator",function(e){e.expect(4);var t=Backbone.Collection.extend({comparator:function(e){return e.id}}),n=new t,o=new t(null,{comparator:!1}),a=new t(null,{comparator:null}),l=new t(null,{comparator:void 0});e.ok(n.comparator),e.ok(!o.comparator),e.ok(!a.comparator),e.ok(l.comparator)}),e.test("#1355 - `options` is passed to success callbacks",function(e){e.expect(2);var t=new Backbone.Model({x:1}),n=new Backbone.Collection,o={opts:!0,success:function(t,n,o){e.ok(o.opts)}};n.sync=t.sync=function(e,t,n){n.success({})},n.fetch(o),n.create(t,o)}),e.test("#1412 - Trigger 'request' and 'sync' events.",function(e){e.expect(4);var t=new Backbone.Collection;t.url="/test",Backbone.ajax=function(e){e.success()},t.on("request",function(n,o,a){e.ok(n===t,"collection has correct 'request' event after fetching")}),t.on("sync",function(n,o,a){e.ok(n===t,"collection has correct 'sync' event after fetching")}),t.fetch(),t.off(),t.on("request",function(n,o,a){e.ok(n===t.get(1),"collection has correct 'request' event after one of its models save")}),t.on("sync",function(n,o,a){e.ok(n===t.get(1),"collection has correct 'sync' event after one of its models save")}),t.create({id:1}),t.off()}),e.test("#3283 - fetch, create calls success with context",function(e){e.expect(2);var t=new Backbone.Collection;t.url="/test",Backbone.ajax=function(e){e.success.call(e.context)};var n={},o={context:n,success:function(){e.equal(this,n)}};t.fetch(o),t.create({id:1},o)}),e.test("#1447 - create with wait adds model.",function(e){e.expect(1);var t=new Backbone.Collection,n=new Backbone.Model;n.sync=function(e,t,n){n.success()},t.on("add",function(){e.ok(!0)}),t.create(n,{wait:!0})}),e.test("#1448 - add sorts collection after merge.",function(e){e.expect(1);var t=new Backbone.Collection([{id:1,x:1},{id:2,x:2}]);t.comparator=function(e){return e.get("x")},t.add({id:1,x:3},{merge:!0}),e.deepEqual(t.pluck("id"),[2,1])}),e.test("#1655 - groupBy can be used with a string argument.",function(e){e.expect(3);var t=new Backbone.Collection([{x:1},{x:2}]),n=t.groupBy("x");e.strictEqual(_.keys(n).length,2),e.strictEqual(n[1][0].get("x"),1),e.strictEqual(n[2][0].get("x"),2)}),e.test("#1655 - sortBy can be used with a string argument.",function(e){e.expect(1);var t=new Backbone.Collection([{x:3},{x:1},{x:2}]),n=_.map(t.sortBy("x"),function(e){return e.get("x")});e.deepEqual(n,[1,2,3])}),e.test("#1604 - Removal during iteration.",function(e){e.expect(0);var t=new Backbone.Collection([{},{}]);t.on("add",function(){t.at(0).destroy()}),t.add({},{at:0})}),e.test("#1638 - `sort` during `add` triggers correctly.",function(e){var t=new Backbone.Collection;t.comparator=function(e){return e.get("x")};var n=[];t.on("add",function(e){e.set({x:3}),t.sort(),n.push(e.id)}),t.add([{id:1,x:1},{id:2,x:2}]),e.deepEqual(n,[1,2])}),e.test("fetch parses models by default",function(e){e.expect(1);var t={},n=Backbone.Collection.extend({url:"test",model:Backbone.Model.extend({parse:function(n){e.strictEqual(n,t)}})});(new n).fetch(),this.ajaxSettings.success([t])}),e.test("`sort` shouldn't always fire on `add`",function(e){e.expect(1);var t=new Backbone.Collection([{id:1},{id:2},{id:3}],{comparator:"id"});t.sort=function(){e.ok(!0)},t.add([]),t.add({id:1}),t.add([{id:2},{id:3}]),t.add({id:4})}),e.test("#1407 parse option on constructor parses collection and models",function(e){e.expect(2);var t={namespace:[{id:1},{id:2}]},n=Backbone.Collection.extend({model:Backbone.Model.extend({parse:function(e){return e.name="test",e}}),parse:function(e){return e.namespace}}),o=new n(t,{parse:!0});e.equal(o.length,2),e.equal(o.at(0).get("name"),"test")}),e.test("#1407 parse option on reset parses collection and models",function(e){e.expect(2);var t={namespace:[{id:1},{id:2}]},n=Backbone.Collection.extend({model:Backbone.Model.extend({parse:function(e){return e.name="test",e}}),parse:function(e){return e.namespace}}),o=new n;o.reset(t,{parse:!0}),e.equal(o.length,2),e.equal(o.at(0).get("name"),"test")}),e.test("Reset includes previous models in triggered event.",function(e){e.expect(1);var t=new Backbone.Model,n=new Backbone.Collection([t]);n.on("reset",function(n,o){e.deepEqual(o.previousModels,[t])}),n.reset([])}),e.test("set",function(e){var t=new Backbone.Model,n=new Backbone.Model({id:2}),o=new Backbone.Model,a=new Backbone.Collection([t,n]);a.on("add",function(t){e.strictEqual(t,o)}),a.on("change",function(t){e.strictEqual(t,n)}),a.on("remove",function(n){e.strictEqual(n,t)}),a.set([],{remove:!1}),e.strictEqual(a.length,2),a.set([t,n,o],{add:!1}),e.strictEqual(a.length,2),a.set([t,{id:2,a:1}],{merge:!1}),e.strictEqual(n.get("a"),void 0),a.set([t,{id:2,a:0},o,{id:4}],{add:!1,remove:!1}),e.strictEqual(a.length,2),e.strictEqual(n.get("a"),0),a.set([{id:2,a:1},o]),e.strictEqual(a.length,2),e.strictEqual(n.get("a"),1),a.off("remove").on("remove",function(t){e.ok(t===n||t===o)}),a.set([]),e.strictEqual(a.length,0),a.off(),a.set([{id:1}]),a.set(),e.strictEqual(a.length,1)}),e.test("set with only cids",function(e){e.expect(3);var t=new Backbone.Model,n=new Backbone.Model,o=new Backbone.Collection;o.set([t,n]),e.equal(o.length,2),o.set([t]),e.equal(o.length,1),o.set([t,t,t,n,n],{remove:!1}),e.equal(o.length,2)}),e.test("set with only idAttribute",function(e){e.expect(3);var t={_id:1},n={_id:2},o=Backbone.Collection.extend({model:Backbone.Model.extend({idAttribute:"_id"})}),a=new o;a.set([t,n]),e.equal(a.length,2),a.set([t]),e.equal(a.length,1),a.set([t,t,t,n,n],{remove:!1}),e.equal(a.length,2)}),e.test("set + merge with default values defined",function(e){var t=Backbone.Model.extend({defaults:{key:"value"}}),n=new t({id:1}),o=new Backbone.Collection([n],{model:t});e.equal(o.first().get("key"),"value"),o.set({id:1,key:"other"}),e.equal(o.first().get("key"),"other"),o.set({id:1,other:"value"}),e.equal(o.first().get("key"),"other"),e.equal(o.length,1)}),e.test("merge without mutation",function(e){var t=Backbone.Model.extend({initialize:function(e,n){e.child&&this.set("child",new t(e.child,n),n)}}),n=Backbone.Collection.extend({model:t}),o=[{id:1,child:{id:2}}],a=new n(o);e.equal(a.first().id,1),a.set(o),e.equal(a.first().id,1),a.set([{id:2,child:{id:2}}].concat(o)),e.deepEqual(a.pluck("id"),[2,1])}),e.test("`set` and model level `parse`",function(e){var t=Backbone.Model.extend({}),n=Backbone.Collection.extend({model:t,parse:function(e){return _.map(e.models,"model")}}),o=new t({id:1}),a=new n(o);a.set({models:[{model:{id:1}},{model:{id:2}}]},{parse:!0}),e.equal(a.first(),o)}),e.test("`set` data is only parsed once",function(e){var t=new Backbone.Collection;t.model=Backbone.Model.extend({parse:function(t){return e.equal(t.parsed,void 0),t.parsed=!0,t}}),t.set({},{parse:!0})}),e.test("`set` matches input order in the absence of a comparator",function(e){var t=new Backbone.Model({id:1}),n=new Backbone.Model({id:2}),o=new Backbone.Model({id:3}),a=new Backbone.Collection([t,n,o]);a.set([{id:3},{id:2},{id:1}]),e.deepEqual(a.models,[o,n,t]),a.set([{id:1},{id:2}]),e.deepEqual(a.models,[t,n]),a.set([n,o,t]),e.deepEqual(a.models,[n,o,t]),a.set([{id:1},{id:2}],{remove:!1}),e.deepEqual(a.models,[n,o,t]),a.set([{id:1},{id:2},{id:3}],{merge:!1}),e.deepEqual(a.models,[t,n,o]),a.set([o,n,t,{id:4}],{add:!1}),e.deepEqual(a.models,[t,n,o])}),e.test("#1894 - Push should not trigger a sort",function(e){e.expect(0);var t=Backbone.Collection.extend({comparator:"id",sort:function(){e.ok(!1)}});(new t).push({id:1})}),e.test("#2428 - push duplicate models, return the correct one",function(e){e.expect(1);var t=new Backbone.Collection,n=t.push({id:101}),o=t.push({id:101});e.ok(o.cid===n.cid)}),e.test("`set` with non-normal id",function(e){var t=Backbone.Collection.extend({model:Backbone.Model.extend({idAttribute:"_id"})}),n=new t({_id:1});n.set([{_id:1,a:1}],{add:!1}),e.equal(n.first().get("a"),1)}),e.test("#1894 - `sort` can optionally be turned off",function(e){e.expect(0);var t=Backbone.Collection.extend({comparator:"id",sort:function(){e.ok(!1)}});(new t).add({id:1},{sort:!1})}),e.test("#1915 - `parse` data in the right order in `set`",function(e){var t=new(Backbone.Collection.extend({parse:function(t){return e.strictEqual(t.status,"ok"),t.data}})),n={status:"ok",data:[{id:1}]};t.set(n,{parse:!0})}),e.test("#1939 - `parse` is passed `options`",function(e){var t=e.async();e.expect(1);var n=new(Backbone.Collection.extend({url:"/",parse:function(t,n){return e.strictEqual(n.xhr.someHeader,"headerValue"),t}})),o=Backbone.ajax;Backbone.ajax=function(e){return _.defer(e.success,[]),{someHeader:"headerValue"}},n.fetch({success:function(){t()}}),Backbone.ajax=o}),e.test("fetch will pass extra options to success callback",function(e){e.expect(1);var t=Backbone.Collection.extend({url:"/test",sync:function(e,t,n){return _.extend(n,{specialSync:!0}),Backbone.Collection.prototype.sync.call(this,e,t,n)}}),n=new t,o=function(t,n,o){e.ok(o.specialSync,"Options were passed correctly to callback")};n.fetch({success:o}),this.ajaxSettings.success()}),e.test("`add` only `sort`s when necessary",function(e){e.expect(2);var t=new(Backbone.Collection.extend({comparator:"a"}))([{id:1},{id:2},{id:3}]);t.on("sort",function(){e.ok(!0)}),t.add({id:4}),t.add({id:1,a:1},{merge:!0}),t.add({id:1,b:1},{merge:!0}),t.add({id:1,a:1},{merge:!0}),t.add(t.models),t.add(t.models,{merge:!0})}),e.test("`add` only `sort`s when necessary with comparator function",function(e){e.expect(3);var t=new(Backbone.Collection.extend({comparator:function(e,t){return e.get("a")>t.get("a")?1:e.get("a")<t.get("a")?-1:0}}))([{id:1},{id:2},{id:3}]);t.on("sort",function(){e.ok(!0)}),t.add({id:4}),t.add({id:1,a:1},{merge:!0}),t.add({id:1,b:1},{merge:!0}),t.add({id:1,a:1},{merge:!0}),t.add(t.models),t.add(t.models,{merge:!0})}),e.test("Attach options to collection.",function(e){e.expect(2);var t=Backbone.Model,n=function(){},o=new Backbone.Collection([],{model:t,comparator:n});e.ok(o.model===t),e.ok(o.comparator===n)}),e.test("Pass falsey for `models` for empty Col with `options`",function(e){e.expect(9);var t={a:1,b:2};_.forEach([void 0,null,!1],function(n){var o=Backbone.Collection.extend({initialize:function(o,a){e.strictEqual(o,n),e.strictEqual(a,t)}}),a=new o(n,t);e.strictEqual(a.length,0)})}),e.test("`add` overrides `set` flags",function(e){var t=new Backbone.Collection;t.once("add",function(e,t,n){t.add({id:2},n)}),t.set({id:1}),e.equal(t.length,2)}),e.test("#2606 - Collection#create, success arguments",function(e){e.expect(1);var t=new Backbone.Collection;t.url="test",t.create({},{success:function(t,n,o){e.strictEqual(n,"response")}}),this.ajaxSettings.success("response")}),e.test("#2612 - nested `parse` works with `Collection#set`",function(e){var t=Backbone.Model.extend({constructor:function(){this.items=new o,Backbone.Model.apply(this,arguments)},parse:function(e){return this.items.set(e.items,{parse:!0}),_.omit(e,"items")}}),n=Backbone.Model.extend({constructor:function(){this.subItems=new Backbone.Collection,Backbone.Model.apply(this,arguments)},parse:function(e){return this.subItems.set(e.subItems,{parse:!0}),_.omit(e,"subItems")}}),o=Backbone.Collection.extend({model:n}),a={name:"JobName",id:1,items:[{id:1,name:"Sub1",subItems:[{id:1,subName:"One"},{id:2,subName:"Two"}]},{id:2,name:"Sub2",subItems:[{id:3,subName:"Three"},{id:4,subName:"Four"}]}]},l={name:"NewJobName",id:1,items:[{id:1,name:"NewSub1",subItems:[{id:1,subName:"NewOne"},{id:2,subName:"NewTwo"}]},{id:2,name:"NewSub2",subItems:[{id:3,subName:"NewThree"},{id:4,subName:"NewFour"}]}]},i=new t(a,{parse:!0});e.equal(i.get("name"),"JobName"),e.equal(i.items.at(0).get("name"),"Sub1"),e.equal(i.items.length,2),e.equal(i.items.get(1).subItems.get(1).get("subName"),"One"),e.equal(i.items.get(2).subItems.get(3).get("subName"),"Three"),i.set(i.parse(l,{parse:!0})),e.equal(i.get("name"),"NewJobName"),e.equal(i.items.at(0).get("name"),"NewSub1"),e.equal(i.items.length,2),e.equal(i.items.get(1).subItems.get(1).get("subName"),"NewOne"),e.equal(i.items.get(2).subItems.get(3).get("subName"),"NewThree")}),e.test("_addReference binds all collection events & adds to the lookup hashes",function(e){e.expect(8);var t={add:0,remove:0},n=Backbone.Collection.extend({_addReference:function(n){Backbone.Collection.prototype._addReference.apply(this,arguments),t.add++,
e.equal(n,this._byId[n.id]),e.equal(n,this._byId[n.cid]),e.equal(n._events.all.length,1)},_removeReference:function(n){Backbone.Collection.prototype._removeReference.apply(this,arguments),t.remove++,e.equal(this._byId[n.id],void 0),e.equal(this._byId[n.cid],void 0),e.equal(n.collection,void 0)}}),o=new n,a=o.add({id:1});o.remove(a),e.equal(t.add,1),e.equal(t.remove,1)}),e.test("Do not allow duplicate models to be `add`ed or `set`",function(e){var t=new Backbone.Collection;t.add([{id:1},{id:1}]),e.equal(t.length,1),e.equal(t.models.length,1),t.set([{id:1},{id:1}]),e.equal(t.length,1),e.equal(t.models.length,1)}),e.test("#3020: #set with {add: false} should not throw.",function(e){e.expect(2);var t=new Backbone.Collection;t.set([{id:1}],{add:!1}),e.strictEqual(t.length,0),e.strictEqual(t.models.length,0)}),e.test("create with wait, model instance, #3028",function(e){e.expect(1);var t=new Backbone.Collection,n=new Backbone.Model({id:1});n.sync=function(){e.equal(this.collection,t)},t.create(n,{wait:!0})}),e.test("modelId",function(e){var t=Backbone.Model.extend(),n=Backbone.Collection.extend({model:t});e.equal(n.prototype.modelId({id:1}),1),t.prototype.idAttribute="_id",e.equal(n.prototype.modelId({_id:1}),1)}),e.test('Polymorphic models work with "simple" constructors',function(e){var t=Backbone.Model.extend(),n=Backbone.Model.extend(),o=Backbone.Collection.extend({model:function(e){return"a"===e.type?new t(e):new n(e)}}),a=new o([{id:1,type:"a"},{id:2,type:"b"}]);e.equal(a.length,2),e.ok(a.at(0)instanceof t),e.equal(a.at(0).id,1),e.ok(a.at(1)instanceof n),e.equal(a.at(1).id,2)}),e.test('Polymorphic models work with "advanced" constructors',function(e){var t=Backbone.Model.extend({idAttribute:"_id"}),n=Backbone.Model.extend({idAttribute:"_id"}),o=Backbone.Collection.extend({model:Backbone.Model.extend({constructor:function(e){return"a"===e.type?new t(e):new n(e)},idAttribute:"_id"})}),a=new o([{_id:1,type:"a"},{_id:2,type:"b"}]);e.equal(a.length,2),e.ok(a.at(0)instanceof t),e.equal(a.at(0),a.get(1)),e.ok(a.at(1)instanceof n),e.equal(a.at(1),a.get(2)),o=Backbone.Collection.extend({model:function(e){return"a"===e.type?new t(e):new n(e)},modelId:function(e){return e.type+"-"+e.id}}),a=new o([{id:1,type:"a"},{id:1,type:"b"}]),e.equal(a.length,2),e.ok(a.at(0)instanceof t),e.equal(a.at(0),a.get("a-1")),e.ok(a.at(1)instanceof n),e.equal(a.at(1),a.get("b-1"))}),e.test("Collection with polymorphic models receives default id from modelId",function(e){e.expect(6);var t=Backbone.Collection.extend({model:function(e){return new Backbone.Model(e)}}),n=new t({id:1});e.equal(n.get(1).id,1),e.equal(n.modelId({id:1}),1);var o=Backbone.Model.extend({idAttribute:"_id"}),a=Backbone.Collection.extend({model:function(e){return new o(e)}}),l=new a({_id:1});e.equal(l.get(1),void 0),e.equal(l.modelId(l.at(0).attributes),void 0);var i=new o({_id:2});l.add(i),e.equal(l.get(2),void 0),e.equal(l.modelId(i.attributes),void 0)}),e.test("#3039 #3951: adding at index fires with correct at",function(e){e.expect(4);var t=new Backbone.Collection([{val:0},{val:4}]);t.on("add",function(t,n,o){e.equal(t.get("val"),o.index)}),t.add([{val:1},{val:2},{val:3}],{at:1}),t.add({val:5},{at:10})}),e.test("#3039: index is not sent when at is not specified",function(e){e.expect(2);var t=new Backbone.Collection([{at:0}]);t.on("add",function(t,n,o){e.equal(void 0,o.index)}),t.add([{at:1},{at:2}])}),e.test("#3199 - Order changing should trigger a sort",function(e){e.expect(1);var t=new Backbone.Model({id:1}),n=new Backbone.Model({id:2}),o=new Backbone.Model({id:3}),a=new Backbone.Collection([t,n,o]);a.on("sort",function(){e.ok(!0)}),a.set([{id:3},{id:2},{id:1}])}),e.test("#3199 - Adding a model should trigger a sort",function(e){e.expect(1);var t=new Backbone.Model({id:1}),n=new Backbone.Model({id:2}),o=new Backbone.Model({id:3}),a=new Backbone.Collection([t,n,o]);a.on("sort",function(){e.ok(!0)}),a.set([{id:1},{id:2},{id:3},{id:0}])}),e.test("#3199 - Order not changing should not trigger a sort",function(e){e.expect(0);var t=new Backbone.Model({id:1}),n=new Backbone.Model({id:2}),o=new Backbone.Model({id:3}),a=new Backbone.Collection([t,n,o]);a.on("sort",function(){e.ok(!1)}),a.set([{id:1},{id:2},{id:3}])}),e.test("add supports negative indexes",function(e){e.expect(1);var t=new Backbone.Collection([{id:1}]);t.add([{id:2},{id:3}],{at:-1}),t.add([{id:2.5}],{at:-2}),t.add([{id:.5}],{at:-6}),e.equal(t.pluck("id").join(","),"0.5,1,2,2.5,3")}),e.test("#set accepts options.at as a string",function(e){e.expect(1);var t=new Backbone.Collection([{id:1},{id:2}]);t.add([{id:3}],{at:"1"}),e.deepEqual(t.pluck("id"),[1,3,2])}),e.test("adding multiple models triggers `update` event once",function(e){e.expect(1);var t=new Backbone.Collection;t.on("update",function(){e.ok(!0)}),t.add([{id:1},{id:2},{id:3}])}),e.test("removing models triggers `update` event once",function(e){e.expect(1);var t=new Backbone.Collection([{id:1},{id:2},{id:3}]);t.on("update",function(){e.ok(!0)}),t.remove([{id:1},{id:2}])}),e.test("remove does not trigger `update` when nothing removed",function(e){e.expect(0);var t=new Backbone.Collection([{id:1},{id:2}]);t.on("update",function(){e.ok(!1)}),t.remove([{id:3}])}),e.test("set triggers `set` event once",function(e){e.expect(1);var t=new Backbone.Collection([{id:1},{id:2}]);t.on("update",function(){e.ok(!0)}),t.set([{id:1},{id:3}])}),e.test("set does not trigger `update` event when nothing added nor removed",function(e){var t=new Backbone.Collection([{id:1},{id:2}]);t.on("update",function(t,n){e.equal(n.changes.added.length,0),e.equal(n.changes.removed.length,0),e.equal(n.changes.merged.length,2)}),t.set([{id:1},{id:2}])}),e.test("#3610 - invoke collects arguments",function(e){e.expect(3);var t=Backbone.Model.extend({method:function(t,n,o){e.equal(t,1),e.equal(n,2),e.equal(o,3)}}),n=Backbone.Collection.extend({model:t}),o=new n([{id:1}]);o.invoke("method",1,2,3)}),e.test("#3662 - triggering change without model will not error",function(e){e.expect(1);var t=new Backbone.Collection([{id:1}]),n=t.first();t.on("change",function(t){e.equal(t,void 0)}),n.trigger("change")}),e.test("#3871 - falsy parse result creates empty collection",function(e){var t=new(Backbone.Collection.extend({parse:function(e,t){}}));t.set("",{parse:!0}),e.equal(t.length,0)}),e.test("#3711 - remove's `update` event returns one removed model",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Collection([t]);n.on("update",function(n,o){var a=o.changes;e.deepEqual(a.added,[]),e.deepEqual(a.merged,[]),e.strictEqual(a.removed[0],t)}),n.remove(t)}),e.test("#3711 - remove's `update` event returns multiple removed models",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:2,title:"Second Post"}),o=new Backbone.Collection([t,n]);o.on("update",function(o,a){var l=a.changes;e.deepEqual(l.added,[]),e.deepEqual(l.merged,[]),e.ok(2===l.removed.length),e.ok(_.indexOf(l.removed,t)>-1&&_.indexOf(l.removed,n)>-1)}),o.remove([t,n])}),e.test("#3711 - set's `update` event returns one added model",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Collection;n.on("update",function(n,o){var a=o.changes.added;e.ok(1===a.length),e.strictEqual(a[0],t)}),n.set(t)}),e.test("#3711 - set's `update` event returns multiple added models",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:2,title:"Second Post"}),o=new Backbone.Collection;o.on("update",function(o,a){var l=a.changes.added;e.ok(2===l.length),e.strictEqual(l[0],t),e.strictEqual(l[1],n)}),o.set([t,n])}),e.test("#3711 - set's `update` event returns one removed model",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:2,title:"Second Post"}),o=new Backbone.Model({id:3,title:"My Last Post"}),a=new Backbone.Collection([t]);a.on("update",function(n,o){var a=o.changes;e.equal(a.added.length,2),e.equal(a.merged.length,0),e.ok(1===a.removed.length),e.strictEqual(a.removed[0],t)}),a.set([n,o])}),e.test("#3711 - set's `update` event returns multiple removed models",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:2,title:"Second Post"}),o=new Backbone.Model({id:3,title:"My Last Post"}),a=new Backbone.Collection([t,n]);a.on("update",function(o,a){var l=a.changes.removed;e.ok(2===l.length),e.strictEqual(l[0],t),e.strictEqual(l[1],n)}),a.set([o])}),e.test("#3711 - set's `update` event returns one merged model",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:2,title:"Second Post"}),o=new Backbone.Model({id:2,title:"Second Post V2"}),a=new Backbone.Collection([t,n]);a.on("update",function(t,n){var a=n.changes.merged;e.ok(1===a.length),e.strictEqual(a[0].get("title"),o.get("title"))}),a.set([o])}),e.test("#3711 - set's `update` event returns multiple merged models",function(e){var t=new Backbone.Model({id:1,title:"First Post"}),n=new Backbone.Model({id:1,title:"First Post V2"}),o=new Backbone.Model({id:2,title:"Second Post"}),a=new Backbone.Model({id:2,title:"Second Post V2"}),l=new Backbone.Collection([t,o]);l.on("update",function(t,o){var l=o.changes.merged;e.ok(2===l.length),e.strictEqual(l[0].get("title"),a.get("title")),e.strictEqual(l[1].get("title"),n.get("title"))}),l.set([a,n])}),e.test("#3711 - set's `update` event should not be triggered adding a model which already exists exactly alike",function(e){var t=!1,n=new Backbone.Model({id:1,title:"First Post"}),o=new Backbone.Collection([n]);o.on("update",function(e,n){t=!0}),o.set([n]),e.equal(t,!1)})}(QUnit);