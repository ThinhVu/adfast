!function(e){e.module("Backbone.Events"),e.test("on and trigger",function(e){e.expect(2);var n={counter:0};_.extend(n,Backbone.Events),n.on("event",function(){n.counter+=1}),n.trigger("event"),e.equal(n.counter,1,"counter should be incremented."),n.trigger("event"),n.trigger("event"),n.trigger("event"),n.trigger("event"),e.equal(n.counter,5,"counter should be incremented five times.")}),e.test("binding and triggering multiple events",function(e){e.expect(4);var n={counter:0};_.extend(n,Backbone.Events),n.on("a b c",function(){n.counter+=1}),n.trigger("a"),e.equal(n.counter,1),n.trigger("a b"),e.equal(n.counter,3),n.trigger("c"),e.equal(n.counter,4),n.off("a c"),n.trigger("a b c"),e.equal(n.counter,5)}),e.test("binding and triggering with event maps",function(e){var n={counter:0};_.extend(n,Backbone.Events);var t=function(){this.counter+=1};n.on({a:t,b:t,c:t},n),n.trigger("a"),e.equal(n.counter,1),n.trigger("a b"),e.equal(n.counter,3),n.trigger("c"),e.equal(n.counter,4),n.off({a:t,c:t},n),n.trigger("a b c"),e.equal(n.counter,5)}),e.test("binding and triggering multiple event names with event maps",function(e){var n={counter:0};_.extend(n,Backbone.Events);var t=function(){this.counter+=1};n.on({"a b c":t}),n.trigger("a"),e.equal(n.counter,1),n.trigger("a b"),e.equal(n.counter,3),n.trigger("c"),e.equal(n.counter,4),n.off({"a c":t}),n.trigger("a b c"),e.equal(n.counter,5)}),e.test("binding and trigger with event maps context",function(e){e.expect(2);var n={counter:0},t={};_.extend(n,Backbone.Events),n.on({a:function(){e.strictEqual(this,t,"defaults `context` to `callback` param")}},t).trigger("a"),n.off().on({a:function(){e.strictEqual(this,t,"will not override explicit `context` param")}},this,t).trigger("a")}),e.test("listenTo and stopListening",function(e){e.expect(1);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenTo(t,"all",function(){e.ok(!0)}),t.trigger("anything"),n.listenTo(t,"all",function(){e.ok(!1)}),n.stopListening(),t.trigger("anything")}),e.test("listenTo and stopListening with event maps",function(e){e.expect(4);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){e.ok(!0)};n.listenTo(t,{event:o}),t.trigger("event"),n.listenTo(t,{event2:o}),t.on("event2",o),n.stopListening(t,{event2:o}),t.trigger("event event2"),n.stopListening(),t.trigger("event event2")}),e.test("stopListening with omitted args",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){e.ok(!0)};n.listenTo(t,"event",o),t.on("event",o),n.listenTo(t,"event2",o),n.stopListening(null,{event:o}),t.trigger("event event2"),t.off(),n.listenTo(t,"event event2",o),n.stopListening(null,"event"),n.stopListening(),t.trigger("event2")}),e.test("listenToOnce",function(e){e.expect(2);var n={counterA:0,counterB:0};_.extend(n,Backbone.Events);var t=function(){n.counterA+=1,n.trigger("event")},o=function(){n.counterB+=1};n.listenToOnce(n,"event",t),n.listenToOnce(n,"event",o),n.trigger("event"),e.equal(n.counterA,1,"counterA should have only been incremented once."),e.equal(n.counterB,1,"counterB should have only been incremented once.")}),e.test("listenToOnce and stopListening",function(e){e.expect(1);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenToOnce(t,"all",function(){e.ok(!0)}),t.trigger("anything"),t.trigger("anything"),n.listenToOnce(t,"all",function(){e.ok(!1)}),n.stopListening(),t.trigger("anything")}),e.test("listenTo, listenToOnce and stopListening",function(e){e.expect(1);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenToOnce(t,"all",function(){e.ok(!0)}),t.trigger("anything"),t.trigger("anything"),n.listenTo(t,"all",function(){e.ok(!1)}),n.stopListening(),t.trigger("anything")}),e.test("listenTo and stopListening with event maps",function(e){e.expect(1);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenTo(t,{change:function(){e.ok(!0)}}),t.trigger("change"),n.listenTo(t,{change:function(){e.ok(!1)}}),n.stopListening(),t.trigger("change")}),e.test("listenTo yourself",function(e){e.expect(1);var n=_.extend({},Backbone.Events);n.listenTo(n,"foo",function(){e.ok(!0)}),n.trigger("foo")}),e.test("listenTo yourself cleans yourself up with stopListening",function(e){e.expect(1);var n=_.extend({},Backbone.Events);n.listenTo(n,"foo",function(){e.ok(!0)}),n.trigger("foo"),n.stopListening(),n.trigger("foo")}),e.test("stopListening cleans up references",function(e){e.expect(12);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){};t.on("event",o),n.listenTo(t,"event",o).stopListening(),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o).stopListening(t),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o).stopListening(t,"event"),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o).stopListening(t,"event",o),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0)}),e.test("stopListening cleans up references from listenToOnce",function(e){e.expect(12);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){};t.on("event",o),n.listenToOnce(t,"event",o).stopListening(),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenToOnce(t,"event",o).stopListening(t),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenToOnce(t,"event",o).stopListening(t,"event"),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0),n.listenToOnce(t,"event",o).stopListening(t,"event",o),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._events.event),1),e.equal(_.size(t._listeners),0)}),e.test("listenTo and off cleaning up references",function(e){e.expect(8);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){};n.listenTo(t,"event",o),t.off(),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o),t.off("event"),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o),t.off(null,o),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._listeners),0),n.listenTo(t,"event",o),t.off(null,null,n),e.equal(_.size(n._listeningTo),0),e.equal(_.size(t._listeners),0)}),e.test("listenTo and stopListening cleaning up references",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenTo(t,"all",function(){e.ok(!0)}),t.trigger("anything"),n.listenTo(t,"other",function(){e.ok(!1)}),n.stopListening(t,"other"),n.stopListening(t,"all"),e.equal(_.size(n._listeningTo),0)}),e.test("listenToOnce without context cleans up references after the event has fired",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenToOnce(t,"all",function(){e.ok(!0)}),t.trigger("anything"),e.equal(_.size(n._listeningTo),0)}),e.test("listenToOnce with event maps cleans up references",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenToOnce(t,{one:function(){e.ok(!0)},two:function(){e.ok(!1)}}),t.trigger("one"),e.equal(_.size(n._listeningTo),1)}),e.test("listenToOnce with event maps binds the correct `this`",function(e){e.expect(1);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events);n.listenToOnce(t,{one:function(){e.ok(this===n)},two:function(){e.ok(!1)}}),t.trigger("one")}),e.test("listenTo with empty callback doesn't throw an error",function(e){e.expect(1);var n=_.extend({},Backbone.Events);n.listenTo(n,"foo",null),n.trigger("foo"),e.ok(!0)}),e.test("trigger all for each event",function(e){e.expect(3);var n,t,o={counter:0};_.extend(o,Backbone.Events),o.on("all",function(e){o.counter++,"a"===e&&(n=!0),"b"===e&&(t=!0)}).trigger("a b"),e.ok(n),e.ok(t),e.equal(o.counter,2)}),e.test("on, then unbind all functions",function(e){e.expect(1);var n={counter:0};_.extend(n,Backbone.Events);var t=function(){n.counter+=1};n.on("event",t),n.trigger("event"),n.off("event"),n.trigger("event"),e.equal(n.counter,1,"counter should have only been incremented once.")}),e.test("bind two callbacks, unbind only one",function(e){e.expect(2);var n={counterA:0,counterB:0};_.extend(n,Backbone.Events);var t=function(){n.counterA+=1};n.on("event",t),n.on("event",function(){n.counterB+=1}),n.trigger("event"),n.off("event",t),n.trigger("event"),e.equal(n.counterA,1,"counterA should have only been incremented once."),e.equal(n.counterB,2,"counterB should have been incremented twice.")}),e.test("unbind a callback in the midst of it firing",function(e){e.expect(1);var n={counter:0};_.extend(n,Backbone.Events);var t=function(){n.counter+=1,n.off("event",t)};n.on("event",t),n.trigger("event"),n.trigger("event"),n.trigger("event"),e.equal(n.counter,1,"the callback should have been unbound.")}),e.test("two binds that unbind themeselves",function(e){e.expect(2);var n={counterA:0,counterB:0};_.extend(n,Backbone.Events);var t=function(){n.counterA+=1,n.off("event",t)},o=function(){n.counterB+=1,n.off("event",o)};n.on("event",t),n.on("event",o),n.trigger("event"),n.trigger("event"),n.trigger("event"),e.equal(n.counterA,1,"counterA should have only been incremented once."),e.equal(n.counterB,1,"counterB should have only been incremented once.")}),e.test("bind a callback with a default context when none supplied",function(e){e.expect(1);var n=_.extend({assertTrue:function(){e.equal(this,n,"`this` was bound to the callback")}},Backbone.Events);n.once("event",n.assertTrue),n.trigger("event")}),e.test("bind a callback with a supplied context",function(e){e.expect(1);var n=function(){return this};n.prototype.assertTrue=function(){e.ok(!0,"`this` was bound to the callback")};var t=_.extend({},Backbone.Events);t.on("event",function(){this.assertTrue()},new n),t.trigger("event")}),e.test("nested trigger with unbind",function(e){e.expect(1);var n={counter:0};_.extend(n,Backbone.Events);var t=function(){n.counter+=1,n.off("event",t),n.trigger("event")},o=function(){n.counter+=1};n.on("event",t),n.on("event",o),n.trigger("event"),e.equal(n.counter,3,"counter should have been incremented three times")}),e.test("callback list is not altered during trigger",function(e){e.expect(2);var n=0,t=_.extend({},Backbone.Events),o=function(){n++},i=function(){t.on("event all",o)},c=function(){t.off("event all",o)};t.on("event all",i).trigger("event"),e.equal(n,0,"on does not alter callback list"),t.off().on("event",c).on("event all",o).trigger("event"),e.equal(n,2,"off does not alter callback list")}),e.test("#1282 - 'all' callback list is retrieved after each event.",function(e){e.expect(1);var n=0,t=_.extend({},Backbone.Events),o=function(){n++};t.on("x",function(){t.on("y",o).on("all",o)}).trigger("x y"),e.strictEqual(n,2)}),e.test("if no callback is provided, `on` is a noop",function(e){e.expect(0),_.extend({},Backbone.Events).on("test").trigger("test")}),e.test("if callback is truthy but not a function, `on` should throw an error just like jQuery",function(e){e.expect(1);var n=_.extend({},Backbone.Events).on("test","noop");e.raises(function(){n.trigger("test")})}),e.test("remove all events for a specific context",function(e){e.expect(4);var n=_.extend({},Backbone.Events);n.on("x y all",function(){e.ok(!0)}),n.on("x y all",function(){e.ok(!1)},n),n.off(null,null,n),n.trigger("x y")}),e.test("remove all events for a specific callback",function(e){e.expect(4);var n=_.extend({},Backbone.Events),t=function(){e.ok(!0)},o=function(){e.ok(!1)};n.on("x y all",t),n.on("x y all",o),n.off(null,o),n.trigger("x y")}),e.test("#1310 - off does not skip consecutive events",function(e){e.expect(0);var n=_.extend({},Backbone.Events);n.on("event",function(){e.ok(!1)},n),n.on("event",function(){e.ok(!1)},n),n.off(null,null,n),n.trigger("event")}),e.test("once",function(e){e.expect(2);var n={counterA:0,counterB:0};_.extend(n,Backbone.Events);var t=function(){n.counterA+=1,n.trigger("event")},o=function(){n.counterB+=1};n.once("event",t),n.once("event",o),n.trigger("event"),e.equal(n.counterA,1,"counterA should have only been incremented once."),e.equal(n.counterB,1,"counterB should have only been incremented once.")}),e.test("once variant one",function(e){e.expect(3);var n=function(){e.ok(!0)},t=_.extend({},Backbone.Events).once("event",n),o=_.extend({},Backbone.Events).on("event",n);t.trigger("event"),o.trigger("event"),o.trigger("event")}),e.test("once variant two",function(e){e.expect(3);var n=function(){e.ok(!0)},t=_.extend({},Backbone.Events);t.once("event",n).on("event",n).trigger("event").trigger("event")}),e.test("once with off",function(e){e.expect(0);var n=function(){e.ok(!0)},t=_.extend({},Backbone.Events);t.once("event",n),t.off("event",n),t.trigger("event")}),e.test("once with event maps",function(e){var n={counter:0};_.extend(n,Backbone.Events);var t=function(){this.counter+=1};n.once({a:t,b:t,c:t},n),n.trigger("a"),e.equal(n.counter,1),n.trigger("a b"),e.equal(n.counter,2),n.trigger("c"),e.equal(n.counter,3),n.trigger("a b c"),e.equal(n.counter,3)}),e.test("bind a callback with a supplied context using once with object notation",function(e){e.expect(1);var n={counter:0},t={};_.extend(n,Backbone.Events),n.once({a:function(){e.strictEqual(this,t,"defaults `context` to `callback` param")}},t).trigger("a")}),e.test("once with off only by context",function(e){e.expect(0);var n={},t=_.extend({},Backbone.Events);t.once("event",function(){e.ok(!1)},n),t.off(null,null,n),t.trigger("event")}),e.test("Backbone object inherits Events",function(e){e.ok(Backbone.on===Backbone.Events.on)}),e.test("once with asynchronous events",function(e){var n=e.async();e.expect(1);var t=_.debounce(function(){e.ok(!0),n()},50),o=_.extend({},Backbone.Events).once("async",t);o.trigger("async"),o.trigger("async")}),e.test("once with multiple events.",function(e){e.expect(2);var n=_.extend({},Backbone.Events);n.once("x y",function(){e.ok(!0)}),n.trigger("x y")}),e.test("Off during iteration with once.",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=function(){this.off("event",t)};n.on("event",t),n.once("event",function(){}),n.on("event",function(){e.ok(!0)}),n.trigger("event"),n.trigger("event")}),e.test("`once` on `all` should work as expected",function(e){e.expect(1),Backbone.once("all",function(){e.ok(!0),Backbone.trigger("all")}),Backbone.trigger("all")}),e.test("once without a callback is a noop",function(e){e.expect(0),_.extend({},Backbone.Events).once("event").trigger("event")}),e.test("listenToOnce without a callback is a noop",function(e){e.expect(0);var n=_.extend({},Backbone.Events);n.listenToOnce(n,"event").trigger("event")}),e.test("event functions are chainable",function(e){var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=function(){};e.equal(n,n.trigger("noeventssetyet")),e.equal(n,n.off("noeventssetyet")),e.equal(n,n.stopListening("noeventssetyet")),e.equal(n,n.on("a",o)),e.equal(n,n.once("c",o)),e.equal(n,n.trigger("a")),e.equal(n,n.listenTo(t,"a",o)),e.equal(n,n.listenToOnce(t,"b",o)),e.equal(n,n.off("a c")),e.equal(n,n.stopListening(t,"a")),e.equal(n,n.stopListening())}),e.test("#3448 - listenToOnce with space-separated events",function(e){e.expect(2);var n=_.extend({},Backbone.Events),t=_.extend({},Backbone.Events),o=1;n.listenToOnce(t,"x y",function(n){e.ok(n===o++)}),t.trigger("x",1),t.trigger("x",1),t.trigger("y",2),t.trigger("y",2)})}(QUnit);